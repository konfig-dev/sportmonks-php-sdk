<?php
/**
 * OddsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Sportmonks
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Sportmonks\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\BodySummarizer;
use GuzzleHttp\Middleware;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Utils;
use Sportmonks\ApiException;
use Sportmonks\Configuration;
use Sportmonks\HeaderSelector;
use Sportmonks\ObjectSerializer;

class OddsApi extends \Sportmonks\CustomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bookmakerById' => [
            'application/json',
        ],
        'bookmakersAll' => [
            'application/json',
        ],
        'bookmakersByFixtureId' => [
            'application/json',
        ],
        'bookmakersMappingByFixtureId' => [
            'application/json',
        ],
        'bookmakersSearch' => [
            'application/json',
        ],
        'fixturesUpcomingByMarketId' => [
            'application/json',
        ],
        'marketById' => [
            'application/json',
        ],
        'marketsAll' => [
            'application/json',
        ],
        'marketsSearch' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $clientOptions = [];
        if (!$config->getVerifySsl()) $clientOptions["verify"] = false;

        // Do not truncate error messages
        // https://github.com/guzzle/guzzle/issues/2185#issuecomment-800293420
        $stack = new HandlerStack(Utils::chooseHandler());
        $stack->push(Middleware::httpErrors(new BodySummarizer(10000)), 'http_errors');
        $stack->push(Middleware::redirect(), 'allow_redirects');
        $stack->push(Middleware::cookies(), 'cookies');
        $stack->push(Middleware::prepareBody(), 'prepare_body');
        $clientOptions["handler"] = $stack;

        $this->client = $client ?: new Client($clientOptions);
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * For initializing request body parameter
     */
    private function setRequestBodyProperty(&$body, $property, $value) {
        if ($body === null) $body = [];
        // user did not pass in a value for this parameter
        if ($value === SENTINEL_VALUE) return;
        $body[$property] = $value;
    }

    /**
     * Operation bookmakerById
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $bookmaker_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakerById'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsBookmakerByIdResponse
     */
    public function bookmakerById(
        $version,
        $bookmaker_id,


        string $contentType = self::contentTypes['bookmakerById'][0]

    )
    {

        list($response) = $this->bookmakerByIdWithHttpInfo($version, $bookmaker_id, $contentType);
        return $response;
    }

    /**
     * Operation bookmakerByIdWithHttpInfo
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $bookmaker_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakerById'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsBookmakerByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookmakerByIdWithHttpInfo($version, $bookmaker_id, string $contentType = self::contentTypes['bookmakerById'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakerByIdRequest($version, $bookmaker_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->bookmakerByIdWithHttpInfo(
                        $version,
                        $bookmaker_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsBookmakerByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsBookmakerByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsBookmakerByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsBookmakerByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsBookmakerByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookmakerByIdAsync
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $bookmaker_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakerById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakerByIdAsync(
        $version,
        $bookmaker_id,


        string $contentType = self::contentTypes['bookmakerById'][0]

    )
    {

        return $this->bookmakerByIdAsyncWithHttpInfo($version, $bookmaker_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookmakerByIdAsyncWithHttpInfo
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $bookmaker_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakerById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakerByIdAsyncWithHttpInfo($version, $bookmaker_id, string $contentType = self::contentTypes['bookmakerById'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsBookmakerByIdResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakerByIdRequest($version, $bookmaker_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookmakerById'
     *
     * @param  string $version The version of the API. (required)
     * @param  int $bookmaker_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakerById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookmakerByIdRequest($version, $bookmaker_id, string $contentType = self::contentTypes['bookmakerById'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling bookmakerById'
            );
        }
        // verify the required parameter 'bookmaker_id' is set
        if ($bookmaker_id === SENTINEL_VALUE || (is_array($bookmaker_id) && count($bookmaker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter bookmaker_id when calling bookmakerById'
            );
        }


        $resourcePath = '/{version}/odds/bookmakers/{bookmakerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($bookmaker_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'bookmakerId' . '}',
                ObjectSerializer::toPathValue($bookmaker_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation bookmakersAll
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersAll'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsBookmakersAllResponse
     */
    public function bookmakersAll(
        $version,


        string $contentType = self::contentTypes['bookmakersAll'][0]

    )
    {

        list($response) = $this->bookmakersAllWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation bookmakersAllWithHttpInfo
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersAll'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsBookmakersAllResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookmakersAllWithHttpInfo($version, string $contentType = self::contentTypes['bookmakersAll'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersAllRequest($version, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->bookmakersAllWithHttpInfo(
                        $version,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsBookmakersAllResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsBookmakersAllResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsBookmakersAllResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsBookmakersAllResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsBookmakersAllResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookmakersAllAsync
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersAllAsync(
        $version,


        string $contentType = self::contentTypes['bookmakersAll'][0]

    )
    {

        return $this->bookmakersAllAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookmakersAllAsyncWithHttpInfo
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersAllAsyncWithHttpInfo($version, string $contentType = self::contentTypes['bookmakersAll'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsBookmakersAllResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersAllRequest($version, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookmakersAll'
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookmakersAllRequest($version, string $contentType = self::contentTypes['bookmakersAll'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling bookmakersAll'
            );
        }


        $resourcePath = '/{version}/odds/bookmakers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation bookmakersByFixtureId
     *
     * By Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersByFixtureId'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsBookmakersByFixtureIdResponse
     */
    public function bookmakersByFixtureId(
        $version,
        $fixture_id,


        string $contentType = self::contentTypes['bookmakersByFixtureId'][0]

    )
    {

        list($response) = $this->bookmakersByFixtureIdWithHttpInfo($version, $fixture_id, $contentType);
        return $response;
    }

    /**
     * Operation bookmakersByFixtureIdWithHttpInfo
     *
     * By Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersByFixtureId'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsBookmakersByFixtureIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookmakersByFixtureIdWithHttpInfo($version, $fixture_id, string $contentType = self::contentTypes['bookmakersByFixtureId'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersByFixtureIdRequest($version, $fixture_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->bookmakersByFixtureIdWithHttpInfo(
                        $version,
                        $fixture_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsBookmakersByFixtureIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsBookmakersByFixtureIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsBookmakersByFixtureIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsBookmakersByFixtureIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsBookmakersByFixtureIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookmakersByFixtureIdAsync
     *
     * By Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersByFixtureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersByFixtureIdAsync(
        $version,
        $fixture_id,


        string $contentType = self::contentTypes['bookmakersByFixtureId'][0]

    )
    {

        return $this->bookmakersByFixtureIdAsyncWithHttpInfo($version, $fixture_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookmakersByFixtureIdAsyncWithHttpInfo
     *
     * By Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersByFixtureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersByFixtureIdAsyncWithHttpInfo($version, $fixture_id, string $contentType = self::contentTypes['bookmakersByFixtureId'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsBookmakersByFixtureIdResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersByFixtureIdRequest($version, $fixture_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookmakersByFixtureId'
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The ID of the bookmaker you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersByFixtureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookmakersByFixtureIdRequest($version, $fixture_id, string $contentType = self::contentTypes['bookmakersByFixtureId'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling bookmakersByFixtureId'
            );
        }
        // verify the required parameter 'fixture_id' is set
        if ($fixture_id === SENTINEL_VALUE || (is_array($fixture_id) && count($fixture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter fixture_id when calling bookmakersByFixtureId'
            );
        }


        $resourcePath = '/{version}/odds/bookmakers/fixtures/{fixtureId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($fixture_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'fixtureId' . '}',
                ObjectSerializer::toPathValue($fixture_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation bookmakersMappingByFixtureId
     *
     * Mapping by Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The fixtureId you want to retrieve the bookmaker mapping from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersMappingByFixtureId'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse
     */
    public function bookmakersMappingByFixtureId(
        $version,
        $fixture_id,


        string $contentType = self::contentTypes['bookmakersMappingByFixtureId'][0]

    )
    {

        list($response) = $this->bookmakersMappingByFixtureIdWithHttpInfo($version, $fixture_id, $contentType);
        return $response;
    }

    /**
     * Operation bookmakersMappingByFixtureIdWithHttpInfo
     *
     * Mapping by Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The fixtureId you want to retrieve the bookmaker mapping from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersMappingByFixtureId'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookmakersMappingByFixtureIdWithHttpInfo($version, $fixture_id, string $contentType = self::contentTypes['bookmakersMappingByFixtureId'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersMappingByFixtureIdRequest($version, $fixture_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->bookmakersMappingByFixtureIdWithHttpInfo(
                        $version,
                        $fixture_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookmakersMappingByFixtureIdAsync
     *
     * Mapping by Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The fixtureId you want to retrieve the bookmaker mapping from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersMappingByFixtureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersMappingByFixtureIdAsync(
        $version,
        $fixture_id,


        string $contentType = self::contentTypes['bookmakersMappingByFixtureId'][0]

    )
    {

        return $this->bookmakersMappingByFixtureIdAsyncWithHttpInfo($version, $fixture_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookmakersMappingByFixtureIdAsyncWithHttpInfo
     *
     * Mapping by Fixture ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The fixtureId you want to retrieve the bookmaker mapping from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersMappingByFixtureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersMappingByFixtureIdAsyncWithHttpInfo($version, $fixture_id, string $contentType = self::contentTypes['bookmakersMappingByFixtureId'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsBookmakersMappingByFixtureIdResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersMappingByFixtureIdRequest($version, $fixture_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookmakersMappingByFixtureId'
     *
     * @param  string $version The version of the API. (required)
     * @param  int $fixture_id The fixtureId you want to retrieve the bookmaker mapping from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersMappingByFixtureId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookmakersMappingByFixtureIdRequest($version, $fixture_id, string $contentType = self::contentTypes['bookmakersMappingByFixtureId'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling bookmakersMappingByFixtureId'
            );
        }
        // verify the required parameter 'fixture_id' is set
        if ($fixture_id === SENTINEL_VALUE || (is_array($fixture_id) && count($fixture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter fixture_id when calling bookmakersMappingByFixtureId'
            );
        }


        $resourcePath = '/{version}/odds/bookmakers/fixtures/{fixtureId}/mapping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($fixture_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'fixtureId' . '}',
                ObjectSerializer::toPathValue($fixture_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation bookmakersSearch
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersSearch'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsBookmakersSearchResponse
     */
    public function bookmakersSearch(
        $version,
        $name,


        string $contentType = self::contentTypes['bookmakersSearch'][0]

    )
    {

        list($response) = $this->bookmakersSearchWithHttpInfo($version, $name, $contentType);
        return $response;
    }

    /**
     * Operation bookmakersSearchWithHttpInfo
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersSearch'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsBookmakersSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookmakersSearchWithHttpInfo($version, $name, string $contentType = self::contentTypes['bookmakersSearch'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersSearchRequest($version, $name, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->bookmakersSearchWithHttpInfo(
                        $version,
                        $name,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsBookmakersSearchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsBookmakersSearchResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsBookmakersSearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsBookmakersSearchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsBookmakersSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookmakersSearchAsync
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersSearchAsync(
        $version,
        $name,


        string $contentType = self::contentTypes['bookmakersSearch'][0]

    )
    {

        return $this->bookmakersSearchAsyncWithHttpInfo($version, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookmakersSearchAsyncWithHttpInfo
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookmakersSearchAsyncWithHttpInfo($version, $name, string $contentType = self::contentTypes['bookmakersSearch'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsBookmakersSearchResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->bookmakersSearchRequest($version, $name, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookmakersSearch'
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bookmakersSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bookmakersSearchRequest($version, $name, string $contentType = self::contentTypes['bookmakersSearch'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling bookmakersSearch'
            );
        }
        // Check if $name is a string
        if ($name !== SENTINEL_VALUE && !is_string($name)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($name, true), gettype($name)));
        }
        // verify the required parameter 'name' is set
        if ($name === SENTINEL_VALUE || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter name when calling bookmakersSearch'
            );
        }


        $resourcePath = '/{version}/odds/bookmakers/search/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($name !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation fixturesUpcomingByMarketId
     *
     * Upcoming Fixtures by Market ID
     *
     * @param  string $version The sport you want to retrieve upcoming fixtures from. (required)
     * @param  string $sport sport (required)
     * @param  int $market_id The ID of the market you want to retrieve upcoming fixtures from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fixturesUpcomingByMarketId'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse
     */
    public function fixturesUpcomingByMarketId(
        $version,
        $sport,
        $market_id,


        string $contentType = self::contentTypes['fixturesUpcomingByMarketId'][0]

    )
    {

        list($response) = $this->fixturesUpcomingByMarketIdWithHttpInfo($version, $sport, $market_id, $contentType);
        return $response;
    }

    /**
     * Operation fixturesUpcomingByMarketIdWithHttpInfo
     *
     * Upcoming Fixtures by Market ID
     *
     * @param  string $version The sport you want to retrieve upcoming fixtures from. (required)
     * @param  string $sport (required)
     * @param  int $market_id The ID of the market you want to retrieve upcoming fixtures from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fixturesUpcomingByMarketId'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fixturesUpcomingByMarketIdWithHttpInfo($version, $sport, $market_id, string $contentType = self::contentTypes['fixturesUpcomingByMarketId'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->fixturesUpcomingByMarketIdRequest($version, $sport, $market_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->fixturesUpcomingByMarketIdWithHttpInfo(
                        $version,
                        $sport,
                        $market_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fixturesUpcomingByMarketIdAsync
     *
     * Upcoming Fixtures by Market ID
     *
     * @param  string $version The sport you want to retrieve upcoming fixtures from. (required)
     * @param  string $sport (required)
     * @param  int $market_id The ID of the market you want to retrieve upcoming fixtures from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fixturesUpcomingByMarketId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fixturesUpcomingByMarketIdAsync(
        $version,
        $sport,
        $market_id,


        string $contentType = self::contentTypes['fixturesUpcomingByMarketId'][0]

    )
    {

        return $this->fixturesUpcomingByMarketIdAsyncWithHttpInfo($version, $sport, $market_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fixturesUpcomingByMarketIdAsyncWithHttpInfo
     *
     * Upcoming Fixtures by Market ID
     *
     * @param  string $version The sport you want to retrieve upcoming fixtures from. (required)
     * @param  string $sport (required)
     * @param  int $market_id The ID of the market you want to retrieve upcoming fixtures from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fixturesUpcomingByMarketId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fixturesUpcomingByMarketIdAsyncWithHttpInfo($version, $sport, $market_id, string $contentType = self::contentTypes['fixturesUpcomingByMarketId'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsFixturesUpcomingByMarketIdResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->fixturesUpcomingByMarketIdRequest($version, $sport, $market_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fixturesUpcomingByMarketId'
     *
     * @param  string $version The sport you want to retrieve upcoming fixtures from. (required)
     * @param  string $sport (required)
     * @param  int $market_id The ID of the market you want to retrieve upcoming fixtures from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fixturesUpcomingByMarketId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fixturesUpcomingByMarketIdRequest($version, $sport, $market_id, string $contentType = self::contentTypes['fixturesUpcomingByMarketId'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling fixturesUpcomingByMarketId'
            );
        }
        // Check if $sport is a string
        if ($sport !== SENTINEL_VALUE && !is_string($sport)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($sport, true), gettype($sport)));
        }
        // verify the required parameter 'sport' is set
        if ($sport === SENTINEL_VALUE || (is_array($sport) && count($sport) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter sport when calling fixturesUpcomingByMarketId'
            );
        }
        // verify the required parameter 'market_id' is set
        if ($market_id === SENTINEL_VALUE || (is_array($market_id) && count($market_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter market_id when calling fixturesUpcomingByMarketId'
            );
        }


        $resourcePath = '/{version}/{sport}/fixtures/upcoming/markets/{marketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($sport !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'sport' . '}',
                ObjectSerializer::toPathValue($sport),
                $resourcePath
            );
        }
        // path params
        if ($market_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'marketId' . '}',
                ObjectSerializer::toPathValue($market_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation marketById
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $market_id The ID of the market you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketById'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsMarketByIdResponse
     */
    public function marketById(
        $version,
        $market_id,


        string $contentType = self::contentTypes['marketById'][0]

    )
    {

        list($response) = $this->marketByIdWithHttpInfo($version, $market_id, $contentType);
        return $response;
    }

    /**
     * Operation marketByIdWithHttpInfo
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $market_id The ID of the market you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketById'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsMarketByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketByIdWithHttpInfo($version, $market_id, string $contentType = self::contentTypes['marketById'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->marketByIdRequest($version, $market_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->marketByIdWithHttpInfo(
                        $version,
                        $market_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsMarketByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsMarketByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsMarketByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsMarketByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsMarketByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketByIdAsync
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $market_id The ID of the market you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketByIdAsync(
        $version,
        $market_id,


        string $contentType = self::contentTypes['marketById'][0]

    )
    {

        return $this->marketByIdAsyncWithHttpInfo($version, $market_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketByIdAsyncWithHttpInfo
     *
     * By ID
     *
     * @param  string $version The version of the API. (required)
     * @param  int $market_id The ID of the market you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketByIdAsyncWithHttpInfo($version, $market_id, string $contentType = self::contentTypes['marketById'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsMarketByIdResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->marketByIdRequest($version, $market_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketById'
     *
     * @param  string $version The version of the API. (required)
     * @param  int $market_id The ID of the market you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketByIdRequest($version, $market_id, string $contentType = self::contentTypes['marketById'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling marketById'
            );
        }
        // verify the required parameter 'market_id' is set
        if ($market_id === SENTINEL_VALUE || (is_array($market_id) && count($market_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter market_id when calling marketById'
            );
        }


        $resourcePath = '/{version}/odds/markets/{marketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($market_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'marketId' . '}',
                ObjectSerializer::toPathValue($market_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation marketsAll
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsAll'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsMarketsAllResponse
     */
    public function marketsAll(
        $version,


        string $contentType = self::contentTypes['marketsAll'][0]

    )
    {

        list($response) = $this->marketsAllWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation marketsAllWithHttpInfo
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsAll'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsMarketsAllResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketsAllWithHttpInfo($version, string $contentType = self::contentTypes['marketsAll'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->marketsAllRequest($version, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->marketsAllWithHttpInfo(
                        $version,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsMarketsAllResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsMarketsAllResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsMarketsAllResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsMarketsAllResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsMarketsAllResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketsAllAsync
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketsAllAsync(
        $version,


        string $contentType = self::contentTypes['marketsAll'][0]

    )
    {

        return $this->marketsAllAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketsAllAsyncWithHttpInfo
     *
     * All
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketsAllAsyncWithHttpInfo($version, string $contentType = self::contentTypes['marketsAll'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsMarketsAllResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->marketsAllRequest($version, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketsAll'
     *
     * @param  string $version The version of the API. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketsAllRequest($version, string $contentType = self::contentTypes['marketsAll'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling marketsAll'
            );
        }


        $resourcePath = '/{version}/odds/markets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation marketsSearch
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsSearch'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sportmonks\Model\OddsMarketsSearchResponse
     */
    public function marketsSearch(
        $version,
        $name,


        string $contentType = self::contentTypes['marketsSearch'][0]

    )
    {

        list($response) = $this->marketsSearchWithHttpInfo($version, $name, $contentType);
        return $response;
    }

    /**
     * Operation marketsSearchWithHttpInfo
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsSearch'] to see the possible values for this operation
     *
     * @throws \Sportmonks\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sportmonks\Model\OddsMarketsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketsSearchWithHttpInfo($version, $name, string $contentType = self::contentTypes['marketsSearch'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->marketsSearchRequest($version, $name, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->marketsSearchWithHttpInfo(
                        $version,
                        $name,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Sportmonks\Model\OddsMarketsSearchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Sportmonks\Model\OddsMarketsSearchResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Sportmonks\Model\OddsMarketsSearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Sportmonks\Model\OddsMarketsSearchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sportmonks\Model\OddsMarketsSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketsSearchAsync
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketsSearchAsync(
        $version,
        $name,


        string $contentType = self::contentTypes['marketsSearch'][0]

    )
    {

        return $this->marketsSearchAsyncWithHttpInfo($version, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketsSearchAsyncWithHttpInfo
     *
     * Search
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketsSearchAsyncWithHttpInfo($version, $name, string $contentType = self::contentTypes['marketsSearch'][0], \Sportmonks\RequestOptions $requestOptions = new \Sportmonks\RequestOptions())
    {
        $returnType = '\Sportmonks\Model\OddsMarketsSearchResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->marketsSearchRequest($version, $name, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketsSearch'
     *
     * @param  string $version The version of the API. (required)
     * @param  string $name The name you want to search on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketsSearchRequest($version, $name, string $contentType = self::contentTypes['marketsSearch'][0])
    {

        // Check if $version is a string
        if ($version !== SENTINEL_VALUE && !is_string($version)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($version, true), gettype($version)));
        }
        // verify the required parameter 'version' is set
        if ($version === SENTINEL_VALUE || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter version when calling marketsSearch'
            );
        }
        // Check if $name is a string
        if ($name !== SENTINEL_VALUE && !is_string($name)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($name, true), gettype($name)));
        }
        // verify the required parameter 'name' is set
        if ($name === SENTINEL_VALUE || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter name when calling marketsSearch'
            );
        }


        $resourcePath = '/{version}/odds/markets/search/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($name !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
