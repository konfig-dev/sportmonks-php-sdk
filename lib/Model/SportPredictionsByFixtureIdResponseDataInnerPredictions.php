<?php
/**
 * SportPredictionsByFixtureIdResponseDataInnerPredictions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sportmonks
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Sportmonks\Model;

use \ArrayAccess;
use \Sportmonks\ObjectSerializer;

/**
 * SportPredictionsByFixtureIdResponseDataInnerPredictions Class Doc Comment
 *
 * @category Class
 * @package  Sportmonks
 * @implements \ArrayAccess<string, mixed>
 */
class SportPredictionsByFixtureIdResponseDataInnerPredictions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SportPredictionsByFixtureIdResponse_data_inner_predictions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'true' => 'float',
        'false' => 'float',
        'scores' => '\Sportmonks\Model\SportPredictionsByFixtureIdResponseDataInnerPredictionsScores',
        'home' => 'float',
        'draw' => 'float',
        'away' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'true' => null,
        'false' => null,
        'scores' => null,
        'home' => null,
        'draw' => null,
        'away' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'true' => false,
		'false' => false,
		'scores' => false,
		'home' => false,
		'draw' => false,
		'away' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'true' => 'true',
        'false' => 'false',
        'scores' => 'scores',
        'home' => 'home',
        'draw' => 'draw',
        'away' => 'away'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'true' => 'setTrue',
        'false' => 'setFalse',
        'scores' => 'setScores',
        'home' => 'setHome',
        'draw' => 'setDraw',
        'away' => 'setAway'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'true' => 'getTrue',
        'false' => 'getFalse',
        'scores' => 'getScores',
        'home' => 'getHome',
        'draw' => 'getDraw',
        'away' => 'getAway'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('true', $data ?? [], null);
        $this->setIfExists('false', $data ?? [], null);
        $this->setIfExists('scores', $data ?? [], null);
        $this->setIfExists('home', $data ?? [], null);
        $this->setIfExists('draw', $data ?? [], null);
        $this->setIfExists('away', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets true
     *
     * @return float|null
     */
    public function getTrue()
    {
        return $this->container['true'];
    }

    /**
     * Sets true
     *
     * @param float|null $true true
     *
     * @return self
     */
    public function setTrue($true)
    {

        if (is_null($true)) {
            throw new \InvalidArgumentException('non-nullable true cannot be null');
        }

        $this->container['true'] = $true;

        return $this;
    }

    /**
     * Gets false
     *
     * @return float|null
     */
    public function getFalse()
    {
        return $this->container['false'];
    }

    /**
     * Sets false
     *
     * @param float|null $false false
     *
     * @return self
     */
    public function setFalse($false)
    {

        if (is_null($false)) {
            throw new \InvalidArgumentException('non-nullable false cannot be null');
        }

        $this->container['false'] = $false;

        return $this;
    }

    /**
     * Gets scores
     *
     * @return \Sportmonks\Model\SportPredictionsByFixtureIdResponseDataInnerPredictionsScores|null
     */
    public function getScores()
    {
        return $this->container['scores'];
    }

    /**
     * Sets scores
     *
     * @param \Sportmonks\Model\SportPredictionsByFixtureIdResponseDataInnerPredictionsScores|null $scores scores
     *
     * @return self
     */
    public function setScores($scores)
    {

        if (is_null($scores)) {
            throw new \InvalidArgumentException('non-nullable scores cannot be null');
        }

        $this->container['scores'] = $scores;

        return $this;
    }

    /**
     * Gets home
     *
     * @return float|null
     */
    public function getHome()
    {
        return $this->container['home'];
    }

    /**
     * Sets home
     *
     * @param float|null $home home
     *
     * @return self
     */
    public function setHome($home)
    {

        if (is_null($home)) {
            throw new \InvalidArgumentException('non-nullable home cannot be null');
        }

        $this->container['home'] = $home;

        return $this;
    }

    /**
     * Gets draw
     *
     * @return float|null
     */
    public function getDraw()
    {
        return $this->container['draw'];
    }

    /**
     * Sets draw
     *
     * @param float|null $draw draw
     *
     * @return self
     */
    public function setDraw($draw)
    {

        if (is_null($draw)) {
            throw new \InvalidArgumentException('non-nullable draw cannot be null');
        }

        $this->container['draw'] = $draw;

        return $this;
    }

    /**
     * Gets away
     *
     * @return float|null
     */
    public function getAway()
    {
        return $this->container['away'];
    }

    /**
     * Sets away
     *
     * @param float|null $away away
     *
     * @return self
     */
    public function setAway($away)
    {

        if (is_null($away)) {
            throw new \InvalidArgumentException('non-nullable away cannot be null');
        }

        $this->container['away'] = $away;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


