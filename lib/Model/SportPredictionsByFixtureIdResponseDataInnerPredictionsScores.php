<?php
/**
 * SportPredictionsByFixtureIdResponseDataInnerPredictionsScores
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sportmonks
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Sportmonks\Model;

use \ArrayAccess;
use \Sportmonks\ObjectSerializer;

/**
 * SportPredictionsByFixtureIdResponseDataInnerPredictionsScores Class Doc Comment
 *
 * @category Class
 * @package  Sportmonks
 * @implements \ArrayAccess<string, mixed>
 */
class SportPredictionsByFixtureIdResponseDataInnerPredictionsScores implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SportPredictionsByFixtureIdResponse_data_inner_predictions_scores';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_0_0' => 'float',
        '_0_1' => 'float',
        '_0_2' => 'float',
        '_0_3' => 'float',
        '_0_4' => 'float',
        '_0_5' => 'float',
        '_0_6' => 'float',
        '_0_7' => 'float',
        '_1_0' => 'float',
        '_1_1' => 'float',
        '_1_2' => 'float',
        '_1_3' => 'float',
        '_1_4' => 'float',
        '_1_5' => 'float',
        '_1_6' => 'float',
        '_1_7' => 'float',
        '_1_8' => 'float',
        '_2_0' => 'float',
        '_2_1' => 'float',
        '_2_2' => 'float',
        '_2_3' => 'float',
        '_2_4' => 'float',
        '_2_5' => 'float',
        '_2_6' => 'float',
        '_2_7' => 'float',
        '_3_0' => 'float',
        '_3_1' => 'float',
        '_3_2' => 'float',
        '_3_3' => 'float',
        '_3_4' => 'float',
        '_3_5' => 'float',
        '_3_6' => 'float',
        '_3_7' => 'float',
        '_4_0' => 'float',
        '_4_1' => 'float',
        '_4_2' => 'float',
        '_4_3' => 'float',
        '_4_4' => 'float',
        '_4_5' => 'float',
        '_4_6' => 'float',
        '_4_7' => 'float',
        '_5_0' => 'float',
        '_5_1' => 'float',
        '_5_2' => 'float',
        '_5_3' => 'float',
        '_5_4' => 'float',
        '_5_5' => 'float',
        '_5_6' => 'float',
        '_6_0' => 'float',
        '_6_1' => 'float',
        '_6_2' => 'float',
        '_6_3' => 'float',
        '_6_4' => 'float',
        '_6_5' => 'float',
        '_6_6' => 'float',
        '_7_0' => 'float',
        '_7_1' => 'float',
        '_7_2' => 'float',
        '_7_3' => 'float',
        '_7_4' => 'float',
        '_7_5' => 'float',
        '_8_0' => 'float',
        '_8_1' => 'float',
        '_8_2' => 'float',
        '_8_3' => 'float',
        '_8_4' => 'float',
        '_9_0' => 'float',
        '_9_1' => 'float',
        '_9_2' => 'float',
        '_9_3' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_0_0' => null,
        '_0_1' => null,
        '_0_2' => null,
        '_0_3' => null,
        '_0_4' => null,
        '_0_5' => null,
        '_0_6' => null,
        '_0_7' => null,
        '_1_0' => null,
        '_1_1' => null,
        '_1_2' => null,
        '_1_3' => null,
        '_1_4' => null,
        '_1_5' => null,
        '_1_6' => null,
        '_1_7' => null,
        '_1_8' => null,
        '_2_0' => null,
        '_2_1' => null,
        '_2_2' => null,
        '_2_3' => null,
        '_2_4' => null,
        '_2_5' => null,
        '_2_6' => null,
        '_2_7' => null,
        '_3_0' => null,
        '_3_1' => null,
        '_3_2' => null,
        '_3_3' => null,
        '_3_4' => null,
        '_3_5' => null,
        '_3_6' => null,
        '_3_7' => null,
        '_4_0' => null,
        '_4_1' => null,
        '_4_2' => null,
        '_4_3' => null,
        '_4_4' => null,
        '_4_5' => null,
        '_4_6' => null,
        '_4_7' => null,
        '_5_0' => null,
        '_5_1' => null,
        '_5_2' => null,
        '_5_3' => null,
        '_5_4' => null,
        '_5_5' => null,
        '_5_6' => null,
        '_6_0' => null,
        '_6_1' => null,
        '_6_2' => null,
        '_6_3' => null,
        '_6_4' => null,
        '_6_5' => null,
        '_6_6' => null,
        '_7_0' => null,
        '_7_1' => null,
        '_7_2' => null,
        '_7_3' => null,
        '_7_4' => null,
        '_7_5' => null,
        '_8_0' => null,
        '_8_1' => null,
        '_8_2' => null,
        '_8_3' => null,
        '_8_4' => null,
        '_9_0' => null,
        '_9_1' => null,
        '_9_2' => null,
        '_9_3' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_0_0' => false,
		'_0_1' => false,
		'_0_2' => false,
		'_0_3' => false,
		'_0_4' => false,
		'_0_5' => false,
		'_0_6' => false,
		'_0_7' => false,
		'_1_0' => false,
		'_1_1' => false,
		'_1_2' => false,
		'_1_3' => false,
		'_1_4' => false,
		'_1_5' => false,
		'_1_6' => false,
		'_1_7' => false,
		'_1_8' => false,
		'_2_0' => false,
		'_2_1' => false,
		'_2_2' => false,
		'_2_3' => false,
		'_2_4' => false,
		'_2_5' => false,
		'_2_6' => false,
		'_2_7' => false,
		'_3_0' => false,
		'_3_1' => false,
		'_3_2' => false,
		'_3_3' => false,
		'_3_4' => false,
		'_3_5' => false,
		'_3_6' => false,
		'_3_7' => false,
		'_4_0' => false,
		'_4_1' => false,
		'_4_2' => false,
		'_4_3' => false,
		'_4_4' => false,
		'_4_5' => false,
		'_4_6' => false,
		'_4_7' => false,
		'_5_0' => false,
		'_5_1' => false,
		'_5_2' => false,
		'_5_3' => false,
		'_5_4' => false,
		'_5_5' => false,
		'_5_6' => false,
		'_6_0' => false,
		'_6_1' => false,
		'_6_2' => false,
		'_6_3' => false,
		'_6_4' => false,
		'_6_5' => false,
		'_6_6' => false,
		'_7_0' => false,
		'_7_1' => false,
		'_7_2' => false,
		'_7_3' => false,
		'_7_4' => false,
		'_7_5' => false,
		'_8_0' => false,
		'_8_1' => false,
		'_8_2' => false,
		'_8_3' => false,
		'_8_4' => false,
		'_9_0' => false,
		'_9_1' => false,
		'_9_2' => false,
		'_9_3' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_0_0' => '0-0',
        '_0_1' => '0-1',
        '_0_2' => '0-2',
        '_0_3' => '0-3',
        '_0_4' => '0-4',
        '_0_5' => '0-5',
        '_0_6' => '0-6',
        '_0_7' => '0-7',
        '_1_0' => '1-0',
        '_1_1' => '1-1',
        '_1_2' => '1-2',
        '_1_3' => '1-3',
        '_1_4' => '1-4',
        '_1_5' => '1-5',
        '_1_6' => '1-6',
        '_1_7' => '1-7',
        '_1_8' => '1-8',
        '_2_0' => '2-0',
        '_2_1' => '2-1',
        '_2_2' => '2-2',
        '_2_3' => '2-3',
        '_2_4' => '2-4',
        '_2_5' => '2-5',
        '_2_6' => '2-6',
        '_2_7' => '2-7',
        '_3_0' => '3-0',
        '_3_1' => '3-1',
        '_3_2' => '3-2',
        '_3_3' => '3-3',
        '_3_4' => '3-4',
        '_3_5' => '3-5',
        '_3_6' => '3-6',
        '_3_7' => '3-7',
        '_4_0' => '4-0',
        '_4_1' => '4-1',
        '_4_2' => '4-2',
        '_4_3' => '4-3',
        '_4_4' => '4-4',
        '_4_5' => '4-5',
        '_4_6' => '4-6',
        '_4_7' => '4-7',
        '_5_0' => '5-0',
        '_5_1' => '5-1',
        '_5_2' => '5-2',
        '_5_3' => '5-3',
        '_5_4' => '5-4',
        '_5_5' => '5-5',
        '_5_6' => '5-6',
        '_6_0' => '6-0',
        '_6_1' => '6-1',
        '_6_2' => '6-2',
        '_6_3' => '6-3',
        '_6_4' => '6-4',
        '_6_5' => '6-5',
        '_6_6' => '6-6',
        '_7_0' => '7-0',
        '_7_1' => '7-1',
        '_7_2' => '7-2',
        '_7_3' => '7-3',
        '_7_4' => '7-4',
        '_7_5' => '7-5',
        '_8_0' => '8-0',
        '_8_1' => '8-1',
        '_8_2' => '8-2',
        '_8_3' => '8-3',
        '_8_4' => '8-4',
        '_9_0' => '9-0',
        '_9_1' => '9-1',
        '_9_2' => '9-2',
        '_9_3' => '9-3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_0_0' => 'set00',
        '_0_1' => 'set01',
        '_0_2' => 'set02',
        '_0_3' => 'set03',
        '_0_4' => 'set04',
        '_0_5' => 'set05',
        '_0_6' => 'set06',
        '_0_7' => 'set07',
        '_1_0' => 'set10',
        '_1_1' => 'set11',
        '_1_2' => 'set12',
        '_1_3' => 'set13',
        '_1_4' => 'set14',
        '_1_5' => 'set15',
        '_1_6' => 'set16',
        '_1_7' => 'set17',
        '_1_8' => 'set18',
        '_2_0' => 'set20',
        '_2_1' => 'set21',
        '_2_2' => 'set22',
        '_2_3' => 'set23',
        '_2_4' => 'set24',
        '_2_5' => 'set25',
        '_2_6' => 'set26',
        '_2_7' => 'set27',
        '_3_0' => 'set30',
        '_3_1' => 'set31',
        '_3_2' => 'set32',
        '_3_3' => 'set33',
        '_3_4' => 'set34',
        '_3_5' => 'set35',
        '_3_6' => 'set36',
        '_3_7' => 'set37',
        '_4_0' => 'set40',
        '_4_1' => 'set41',
        '_4_2' => 'set42',
        '_4_3' => 'set43',
        '_4_4' => 'set44',
        '_4_5' => 'set45',
        '_4_6' => 'set46',
        '_4_7' => 'set47',
        '_5_0' => 'set50',
        '_5_1' => 'set51',
        '_5_2' => 'set52',
        '_5_3' => 'set53',
        '_5_4' => 'set54',
        '_5_5' => 'set55',
        '_5_6' => 'set56',
        '_6_0' => 'set60',
        '_6_1' => 'set61',
        '_6_2' => 'set62',
        '_6_3' => 'set63',
        '_6_4' => 'set64',
        '_6_5' => 'set65',
        '_6_6' => 'set66',
        '_7_0' => 'set70',
        '_7_1' => 'set71',
        '_7_2' => 'set72',
        '_7_3' => 'set73',
        '_7_4' => 'set74',
        '_7_5' => 'set75',
        '_8_0' => 'set80',
        '_8_1' => 'set81',
        '_8_2' => 'set82',
        '_8_3' => 'set83',
        '_8_4' => 'set84',
        '_9_0' => 'set90',
        '_9_1' => 'set91',
        '_9_2' => 'set92',
        '_9_3' => 'set93'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_0_0' => 'get00',
        '_0_1' => 'get01',
        '_0_2' => 'get02',
        '_0_3' => 'get03',
        '_0_4' => 'get04',
        '_0_5' => 'get05',
        '_0_6' => 'get06',
        '_0_7' => 'get07',
        '_1_0' => 'get10',
        '_1_1' => 'get11',
        '_1_2' => 'get12',
        '_1_3' => 'get13',
        '_1_4' => 'get14',
        '_1_5' => 'get15',
        '_1_6' => 'get16',
        '_1_7' => 'get17',
        '_1_8' => 'get18',
        '_2_0' => 'get20',
        '_2_1' => 'get21',
        '_2_2' => 'get22',
        '_2_3' => 'get23',
        '_2_4' => 'get24',
        '_2_5' => 'get25',
        '_2_6' => 'get26',
        '_2_7' => 'get27',
        '_3_0' => 'get30',
        '_3_1' => 'get31',
        '_3_2' => 'get32',
        '_3_3' => 'get33',
        '_3_4' => 'get34',
        '_3_5' => 'get35',
        '_3_6' => 'get36',
        '_3_7' => 'get37',
        '_4_0' => 'get40',
        '_4_1' => 'get41',
        '_4_2' => 'get42',
        '_4_3' => 'get43',
        '_4_4' => 'get44',
        '_4_5' => 'get45',
        '_4_6' => 'get46',
        '_4_7' => 'get47',
        '_5_0' => 'get50',
        '_5_1' => 'get51',
        '_5_2' => 'get52',
        '_5_3' => 'get53',
        '_5_4' => 'get54',
        '_5_5' => 'get55',
        '_5_6' => 'get56',
        '_6_0' => 'get60',
        '_6_1' => 'get61',
        '_6_2' => 'get62',
        '_6_3' => 'get63',
        '_6_4' => 'get64',
        '_6_5' => 'get65',
        '_6_6' => 'get66',
        '_7_0' => 'get70',
        '_7_1' => 'get71',
        '_7_2' => 'get72',
        '_7_3' => 'get73',
        '_7_4' => 'get74',
        '_7_5' => 'get75',
        '_8_0' => 'get80',
        '_8_1' => 'get81',
        '_8_2' => 'get82',
        '_8_3' => 'get83',
        '_8_4' => 'get84',
        '_9_0' => 'get90',
        '_9_1' => 'get91',
        '_9_2' => 'get92',
        '_9_3' => 'get93'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_0_0', $data ?? [], null);
        $this->setIfExists('_0_1', $data ?? [], null);
        $this->setIfExists('_0_2', $data ?? [], null);
        $this->setIfExists('_0_3', $data ?? [], null);
        $this->setIfExists('_0_4', $data ?? [], null);
        $this->setIfExists('_0_5', $data ?? [], null);
        $this->setIfExists('_0_6', $data ?? [], null);
        $this->setIfExists('_0_7', $data ?? [], null);
        $this->setIfExists('_1_0', $data ?? [], null);
        $this->setIfExists('_1_1', $data ?? [], null);
        $this->setIfExists('_1_2', $data ?? [], null);
        $this->setIfExists('_1_3', $data ?? [], null);
        $this->setIfExists('_1_4', $data ?? [], null);
        $this->setIfExists('_1_5', $data ?? [], null);
        $this->setIfExists('_1_6', $data ?? [], null);
        $this->setIfExists('_1_7', $data ?? [], null);
        $this->setIfExists('_1_8', $data ?? [], null);
        $this->setIfExists('_2_0', $data ?? [], null);
        $this->setIfExists('_2_1', $data ?? [], null);
        $this->setIfExists('_2_2', $data ?? [], null);
        $this->setIfExists('_2_3', $data ?? [], null);
        $this->setIfExists('_2_4', $data ?? [], null);
        $this->setIfExists('_2_5', $data ?? [], null);
        $this->setIfExists('_2_6', $data ?? [], null);
        $this->setIfExists('_2_7', $data ?? [], null);
        $this->setIfExists('_3_0', $data ?? [], null);
        $this->setIfExists('_3_1', $data ?? [], null);
        $this->setIfExists('_3_2', $data ?? [], null);
        $this->setIfExists('_3_3', $data ?? [], null);
        $this->setIfExists('_3_4', $data ?? [], null);
        $this->setIfExists('_3_5', $data ?? [], null);
        $this->setIfExists('_3_6', $data ?? [], null);
        $this->setIfExists('_3_7', $data ?? [], null);
        $this->setIfExists('_4_0', $data ?? [], null);
        $this->setIfExists('_4_1', $data ?? [], null);
        $this->setIfExists('_4_2', $data ?? [], null);
        $this->setIfExists('_4_3', $data ?? [], null);
        $this->setIfExists('_4_4', $data ?? [], null);
        $this->setIfExists('_4_5', $data ?? [], null);
        $this->setIfExists('_4_6', $data ?? [], null);
        $this->setIfExists('_4_7', $data ?? [], null);
        $this->setIfExists('_5_0', $data ?? [], null);
        $this->setIfExists('_5_1', $data ?? [], null);
        $this->setIfExists('_5_2', $data ?? [], null);
        $this->setIfExists('_5_3', $data ?? [], null);
        $this->setIfExists('_5_4', $data ?? [], null);
        $this->setIfExists('_5_5', $data ?? [], null);
        $this->setIfExists('_5_6', $data ?? [], null);
        $this->setIfExists('_6_0', $data ?? [], null);
        $this->setIfExists('_6_1', $data ?? [], null);
        $this->setIfExists('_6_2', $data ?? [], null);
        $this->setIfExists('_6_3', $data ?? [], null);
        $this->setIfExists('_6_4', $data ?? [], null);
        $this->setIfExists('_6_5', $data ?? [], null);
        $this->setIfExists('_6_6', $data ?? [], null);
        $this->setIfExists('_7_0', $data ?? [], null);
        $this->setIfExists('_7_1', $data ?? [], null);
        $this->setIfExists('_7_2', $data ?? [], null);
        $this->setIfExists('_7_3', $data ?? [], null);
        $this->setIfExists('_7_4', $data ?? [], null);
        $this->setIfExists('_7_5', $data ?? [], null);
        $this->setIfExists('_8_0', $data ?? [], null);
        $this->setIfExists('_8_1', $data ?? [], null);
        $this->setIfExists('_8_2', $data ?? [], null);
        $this->setIfExists('_8_3', $data ?? [], null);
        $this->setIfExists('_8_4', $data ?? [], null);
        $this->setIfExists('_9_0', $data ?? [], null);
        $this->setIfExists('_9_1', $data ?? [], null);
        $this->setIfExists('_9_2', $data ?? [], null);
        $this->setIfExists('_9_3', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _0_0
     *
     * @return float|null
     */
    public function get00()
    {
        return $this->container['_0_0'];
    }

    /**
     * Sets _0_0
     *
     * @param float|null $_0_0 _0_0
     *
     * @return self
     */
    public function set00($_0_0)
    {

        if (is_null($_0_0)) {
            throw new \InvalidArgumentException('non-nullable _0_0 cannot be null');
        }

        $this->container['_0_0'] = $_0_0;

        return $this;
    }

    /**
     * Gets _0_1
     *
     * @return float|null
     */
    public function get01()
    {
        return $this->container['_0_1'];
    }

    /**
     * Sets _0_1
     *
     * @param float|null $_0_1 _0_1
     *
     * @return self
     */
    public function set01($_0_1)
    {

        if (is_null($_0_1)) {
            throw new \InvalidArgumentException('non-nullable _0_1 cannot be null');
        }

        $this->container['_0_1'] = $_0_1;

        return $this;
    }

    /**
     * Gets _0_2
     *
     * @return float|null
     */
    public function get02()
    {
        return $this->container['_0_2'];
    }

    /**
     * Sets _0_2
     *
     * @param float|null $_0_2 _0_2
     *
     * @return self
     */
    public function set02($_0_2)
    {

        if (is_null($_0_2)) {
            throw new \InvalidArgumentException('non-nullable _0_2 cannot be null');
        }

        $this->container['_0_2'] = $_0_2;

        return $this;
    }

    /**
     * Gets _0_3
     *
     * @return float|null
     */
    public function get03()
    {
        return $this->container['_0_3'];
    }

    /**
     * Sets _0_3
     *
     * @param float|null $_0_3 _0_3
     *
     * @return self
     */
    public function set03($_0_3)
    {

        if (is_null($_0_3)) {
            throw new \InvalidArgumentException('non-nullable _0_3 cannot be null');
        }

        $this->container['_0_3'] = $_0_3;

        return $this;
    }

    /**
     * Gets _0_4
     *
     * @return float|null
     */
    public function get04()
    {
        return $this->container['_0_4'];
    }

    /**
     * Sets _0_4
     *
     * @param float|null $_0_4 _0_4
     *
     * @return self
     */
    public function set04($_0_4)
    {

        if (is_null($_0_4)) {
            throw new \InvalidArgumentException('non-nullable _0_4 cannot be null');
        }

        $this->container['_0_4'] = $_0_4;

        return $this;
    }

    /**
     * Gets _0_5
     *
     * @return float|null
     */
    public function get05()
    {
        return $this->container['_0_5'];
    }

    /**
     * Sets _0_5
     *
     * @param float|null $_0_5 _0_5
     *
     * @return self
     */
    public function set05($_0_5)
    {

        if (is_null($_0_5)) {
            throw new \InvalidArgumentException('non-nullable _0_5 cannot be null');
        }

        $this->container['_0_5'] = $_0_5;

        return $this;
    }

    /**
     * Gets _0_6
     *
     * @return float|null
     */
    public function get06()
    {
        return $this->container['_0_6'];
    }

    /**
     * Sets _0_6
     *
     * @param float|null $_0_6 _0_6
     *
     * @return self
     */
    public function set06($_0_6)
    {

        if (is_null($_0_6)) {
            throw new \InvalidArgumentException('non-nullable _0_6 cannot be null');
        }

        $this->container['_0_6'] = $_0_6;

        return $this;
    }

    /**
     * Gets _0_7
     *
     * @return float|null
     */
    public function get07()
    {
        return $this->container['_0_7'];
    }

    /**
     * Sets _0_7
     *
     * @param float|null $_0_7 _0_7
     *
     * @return self
     */
    public function set07($_0_7)
    {

        if (is_null($_0_7)) {
            throw new \InvalidArgumentException('non-nullable _0_7 cannot be null');
        }

        $this->container['_0_7'] = $_0_7;

        return $this;
    }

    /**
     * Gets _1_0
     *
     * @return float|null
     */
    public function get10()
    {
        return $this->container['_1_0'];
    }

    /**
     * Sets _1_0
     *
     * @param float|null $_1_0 _1_0
     *
     * @return self
     */
    public function set10($_1_0)
    {

        if (is_null($_1_0)) {
            throw new \InvalidArgumentException('non-nullable _1_0 cannot be null');
        }

        $this->container['_1_0'] = $_1_0;

        return $this;
    }

    /**
     * Gets _1_1
     *
     * @return float|null
     */
    public function get11()
    {
        return $this->container['_1_1'];
    }

    /**
     * Sets _1_1
     *
     * @param float|null $_1_1 _1_1
     *
     * @return self
     */
    public function set11($_1_1)
    {

        if (is_null($_1_1)) {
            throw new \InvalidArgumentException('non-nullable _1_1 cannot be null');
        }

        $this->container['_1_1'] = $_1_1;

        return $this;
    }

    /**
     * Gets _1_2
     *
     * @return float|null
     */
    public function get12()
    {
        return $this->container['_1_2'];
    }

    /**
     * Sets _1_2
     *
     * @param float|null $_1_2 _1_2
     *
     * @return self
     */
    public function set12($_1_2)
    {

        if (is_null($_1_2)) {
            throw new \InvalidArgumentException('non-nullable _1_2 cannot be null');
        }

        $this->container['_1_2'] = $_1_2;

        return $this;
    }

    /**
     * Gets _1_3
     *
     * @return float|null
     */
    public function get13()
    {
        return $this->container['_1_3'];
    }

    /**
     * Sets _1_3
     *
     * @param float|null $_1_3 _1_3
     *
     * @return self
     */
    public function set13($_1_3)
    {

        if (is_null($_1_3)) {
            throw new \InvalidArgumentException('non-nullable _1_3 cannot be null');
        }

        $this->container['_1_3'] = $_1_3;

        return $this;
    }

    /**
     * Gets _1_4
     *
     * @return float|null
     */
    public function get14()
    {
        return $this->container['_1_4'];
    }

    /**
     * Sets _1_4
     *
     * @param float|null $_1_4 _1_4
     *
     * @return self
     */
    public function set14($_1_4)
    {

        if (is_null($_1_4)) {
            throw new \InvalidArgumentException('non-nullable _1_4 cannot be null');
        }

        $this->container['_1_4'] = $_1_4;

        return $this;
    }

    /**
     * Gets _1_5
     *
     * @return float|null
     */
    public function get15()
    {
        return $this->container['_1_5'];
    }

    /**
     * Sets _1_5
     *
     * @param float|null $_1_5 _1_5
     *
     * @return self
     */
    public function set15($_1_5)
    {

        if (is_null($_1_5)) {
            throw new \InvalidArgumentException('non-nullable _1_5 cannot be null');
        }

        $this->container['_1_5'] = $_1_5;

        return $this;
    }

    /**
     * Gets _1_6
     *
     * @return float|null
     */
    public function get16()
    {
        return $this->container['_1_6'];
    }

    /**
     * Sets _1_6
     *
     * @param float|null $_1_6 _1_6
     *
     * @return self
     */
    public function set16($_1_6)
    {

        if (is_null($_1_6)) {
            throw new \InvalidArgumentException('non-nullable _1_6 cannot be null');
        }

        $this->container['_1_6'] = $_1_6;

        return $this;
    }

    /**
     * Gets _1_7
     *
     * @return float|null
     */
    public function get17()
    {
        return $this->container['_1_7'];
    }

    /**
     * Sets _1_7
     *
     * @param float|null $_1_7 _1_7
     *
     * @return self
     */
    public function set17($_1_7)
    {

        if (is_null($_1_7)) {
            throw new \InvalidArgumentException('non-nullable _1_7 cannot be null');
        }

        $this->container['_1_7'] = $_1_7;

        return $this;
    }

    /**
     * Gets _1_8
     *
     * @return float|null
     */
    public function get18()
    {
        return $this->container['_1_8'];
    }

    /**
     * Sets _1_8
     *
     * @param float|null $_1_8 _1_8
     *
     * @return self
     */
    public function set18($_1_8)
    {

        if (is_null($_1_8)) {
            throw new \InvalidArgumentException('non-nullable _1_8 cannot be null');
        }

        $this->container['_1_8'] = $_1_8;

        return $this;
    }

    /**
     * Gets _2_0
     *
     * @return float|null
     */
    public function get20()
    {
        return $this->container['_2_0'];
    }

    /**
     * Sets _2_0
     *
     * @param float|null $_2_0 _2_0
     *
     * @return self
     */
    public function set20($_2_0)
    {

        if (is_null($_2_0)) {
            throw new \InvalidArgumentException('non-nullable _2_0 cannot be null');
        }

        $this->container['_2_0'] = $_2_0;

        return $this;
    }

    /**
     * Gets _2_1
     *
     * @return float|null
     */
    public function get21()
    {
        return $this->container['_2_1'];
    }

    /**
     * Sets _2_1
     *
     * @param float|null $_2_1 _2_1
     *
     * @return self
     */
    public function set21($_2_1)
    {

        if (is_null($_2_1)) {
            throw new \InvalidArgumentException('non-nullable _2_1 cannot be null');
        }

        $this->container['_2_1'] = $_2_1;

        return $this;
    }

    /**
     * Gets _2_2
     *
     * @return float|null
     */
    public function get22()
    {
        return $this->container['_2_2'];
    }

    /**
     * Sets _2_2
     *
     * @param float|null $_2_2 _2_2
     *
     * @return self
     */
    public function set22($_2_2)
    {

        if (is_null($_2_2)) {
            throw new \InvalidArgumentException('non-nullable _2_2 cannot be null');
        }

        $this->container['_2_2'] = $_2_2;

        return $this;
    }

    /**
     * Gets _2_3
     *
     * @return float|null
     */
    public function get23()
    {
        return $this->container['_2_3'];
    }

    /**
     * Sets _2_3
     *
     * @param float|null $_2_3 _2_3
     *
     * @return self
     */
    public function set23($_2_3)
    {

        if (is_null($_2_3)) {
            throw new \InvalidArgumentException('non-nullable _2_3 cannot be null');
        }

        $this->container['_2_3'] = $_2_3;

        return $this;
    }

    /**
     * Gets _2_4
     *
     * @return float|null
     */
    public function get24()
    {
        return $this->container['_2_4'];
    }

    /**
     * Sets _2_4
     *
     * @param float|null $_2_4 _2_4
     *
     * @return self
     */
    public function set24($_2_4)
    {

        if (is_null($_2_4)) {
            throw new \InvalidArgumentException('non-nullable _2_4 cannot be null');
        }

        $this->container['_2_4'] = $_2_4;

        return $this;
    }

    /**
     * Gets _2_5
     *
     * @return float|null
     */
    public function get25()
    {
        return $this->container['_2_5'];
    }

    /**
     * Sets _2_5
     *
     * @param float|null $_2_5 _2_5
     *
     * @return self
     */
    public function set25($_2_5)
    {

        if (is_null($_2_5)) {
            throw new \InvalidArgumentException('non-nullable _2_5 cannot be null');
        }

        $this->container['_2_5'] = $_2_5;

        return $this;
    }

    /**
     * Gets _2_6
     *
     * @return float|null
     */
    public function get26()
    {
        return $this->container['_2_6'];
    }

    /**
     * Sets _2_6
     *
     * @param float|null $_2_6 _2_6
     *
     * @return self
     */
    public function set26($_2_6)
    {

        if (is_null($_2_6)) {
            throw new \InvalidArgumentException('non-nullable _2_6 cannot be null');
        }

        $this->container['_2_6'] = $_2_6;

        return $this;
    }

    /**
     * Gets _2_7
     *
     * @return float|null
     */
    public function get27()
    {
        return $this->container['_2_7'];
    }

    /**
     * Sets _2_7
     *
     * @param float|null $_2_7 _2_7
     *
     * @return self
     */
    public function set27($_2_7)
    {

        if (is_null($_2_7)) {
            throw new \InvalidArgumentException('non-nullable _2_7 cannot be null');
        }

        $this->container['_2_7'] = $_2_7;

        return $this;
    }

    /**
     * Gets _3_0
     *
     * @return float|null
     */
    public function get30()
    {
        return $this->container['_3_0'];
    }

    /**
     * Sets _3_0
     *
     * @param float|null $_3_0 _3_0
     *
     * @return self
     */
    public function set30($_3_0)
    {

        if (is_null($_3_0)) {
            throw new \InvalidArgumentException('non-nullable _3_0 cannot be null');
        }

        $this->container['_3_0'] = $_3_0;

        return $this;
    }

    /**
     * Gets _3_1
     *
     * @return float|null
     */
    public function get31()
    {
        return $this->container['_3_1'];
    }

    /**
     * Sets _3_1
     *
     * @param float|null $_3_1 _3_1
     *
     * @return self
     */
    public function set31($_3_1)
    {

        if (is_null($_3_1)) {
            throw new \InvalidArgumentException('non-nullable _3_1 cannot be null');
        }

        $this->container['_3_1'] = $_3_1;

        return $this;
    }

    /**
     * Gets _3_2
     *
     * @return float|null
     */
    public function get32()
    {
        return $this->container['_3_2'];
    }

    /**
     * Sets _3_2
     *
     * @param float|null $_3_2 _3_2
     *
     * @return self
     */
    public function set32($_3_2)
    {

        if (is_null($_3_2)) {
            throw new \InvalidArgumentException('non-nullable _3_2 cannot be null');
        }

        $this->container['_3_2'] = $_3_2;

        return $this;
    }

    /**
     * Gets _3_3
     *
     * @return float|null
     */
    public function get33()
    {
        return $this->container['_3_3'];
    }

    /**
     * Sets _3_3
     *
     * @param float|null $_3_3 _3_3
     *
     * @return self
     */
    public function set33($_3_3)
    {

        if (is_null($_3_3)) {
            throw new \InvalidArgumentException('non-nullable _3_3 cannot be null');
        }

        $this->container['_3_3'] = $_3_3;

        return $this;
    }

    /**
     * Gets _3_4
     *
     * @return float|null
     */
    public function get34()
    {
        return $this->container['_3_4'];
    }

    /**
     * Sets _3_4
     *
     * @param float|null $_3_4 _3_4
     *
     * @return self
     */
    public function set34($_3_4)
    {

        if (is_null($_3_4)) {
            throw new \InvalidArgumentException('non-nullable _3_4 cannot be null');
        }

        $this->container['_3_4'] = $_3_4;

        return $this;
    }

    /**
     * Gets _3_5
     *
     * @return float|null
     */
    public function get35()
    {
        return $this->container['_3_5'];
    }

    /**
     * Sets _3_5
     *
     * @param float|null $_3_5 _3_5
     *
     * @return self
     */
    public function set35($_3_5)
    {

        if (is_null($_3_5)) {
            throw new \InvalidArgumentException('non-nullable _3_5 cannot be null');
        }

        $this->container['_3_5'] = $_3_5;

        return $this;
    }

    /**
     * Gets _3_6
     *
     * @return float|null
     */
    public function get36()
    {
        return $this->container['_3_6'];
    }

    /**
     * Sets _3_6
     *
     * @param float|null $_3_6 _3_6
     *
     * @return self
     */
    public function set36($_3_6)
    {

        if (is_null($_3_6)) {
            throw new \InvalidArgumentException('non-nullable _3_6 cannot be null');
        }

        $this->container['_3_6'] = $_3_6;

        return $this;
    }

    /**
     * Gets _3_7
     *
     * @return float|null
     */
    public function get37()
    {
        return $this->container['_3_7'];
    }

    /**
     * Sets _3_7
     *
     * @param float|null $_3_7 _3_7
     *
     * @return self
     */
    public function set37($_3_7)
    {

        if (is_null($_3_7)) {
            throw new \InvalidArgumentException('non-nullable _3_7 cannot be null');
        }

        $this->container['_3_7'] = $_3_7;

        return $this;
    }

    /**
     * Gets _4_0
     *
     * @return float|null
     */
    public function get40()
    {
        return $this->container['_4_0'];
    }

    /**
     * Sets _4_0
     *
     * @param float|null $_4_0 _4_0
     *
     * @return self
     */
    public function set40($_4_0)
    {

        if (is_null($_4_0)) {
            throw new \InvalidArgumentException('non-nullable _4_0 cannot be null');
        }

        $this->container['_4_0'] = $_4_0;

        return $this;
    }

    /**
     * Gets _4_1
     *
     * @return float|null
     */
    public function get41()
    {
        return $this->container['_4_1'];
    }

    /**
     * Sets _4_1
     *
     * @param float|null $_4_1 _4_1
     *
     * @return self
     */
    public function set41($_4_1)
    {

        if (is_null($_4_1)) {
            throw new \InvalidArgumentException('non-nullable _4_1 cannot be null');
        }

        $this->container['_4_1'] = $_4_1;

        return $this;
    }

    /**
     * Gets _4_2
     *
     * @return float|null
     */
    public function get42()
    {
        return $this->container['_4_2'];
    }

    /**
     * Sets _4_2
     *
     * @param float|null $_4_2 _4_2
     *
     * @return self
     */
    public function set42($_4_2)
    {

        if (is_null($_4_2)) {
            throw new \InvalidArgumentException('non-nullable _4_2 cannot be null');
        }

        $this->container['_4_2'] = $_4_2;

        return $this;
    }

    /**
     * Gets _4_3
     *
     * @return float|null
     */
    public function get43()
    {
        return $this->container['_4_3'];
    }

    /**
     * Sets _4_3
     *
     * @param float|null $_4_3 _4_3
     *
     * @return self
     */
    public function set43($_4_3)
    {

        if (is_null($_4_3)) {
            throw new \InvalidArgumentException('non-nullable _4_3 cannot be null');
        }

        $this->container['_4_3'] = $_4_3;

        return $this;
    }

    /**
     * Gets _4_4
     *
     * @return float|null
     */
    public function get44()
    {
        return $this->container['_4_4'];
    }

    /**
     * Sets _4_4
     *
     * @param float|null $_4_4 _4_4
     *
     * @return self
     */
    public function set44($_4_4)
    {

        if (is_null($_4_4)) {
            throw new \InvalidArgumentException('non-nullable _4_4 cannot be null');
        }

        $this->container['_4_4'] = $_4_4;

        return $this;
    }

    /**
     * Gets _4_5
     *
     * @return float|null
     */
    public function get45()
    {
        return $this->container['_4_5'];
    }

    /**
     * Sets _4_5
     *
     * @param float|null $_4_5 _4_5
     *
     * @return self
     */
    public function set45($_4_5)
    {

        if (is_null($_4_5)) {
            throw new \InvalidArgumentException('non-nullable _4_5 cannot be null');
        }

        $this->container['_4_5'] = $_4_5;

        return $this;
    }

    /**
     * Gets _4_6
     *
     * @return float|null
     */
    public function get46()
    {
        return $this->container['_4_6'];
    }

    /**
     * Sets _4_6
     *
     * @param float|null $_4_6 _4_6
     *
     * @return self
     */
    public function set46($_4_6)
    {

        if (is_null($_4_6)) {
            throw new \InvalidArgumentException('non-nullable _4_6 cannot be null');
        }

        $this->container['_4_6'] = $_4_6;

        return $this;
    }

    /**
     * Gets _4_7
     *
     * @return float|null
     */
    public function get47()
    {
        return $this->container['_4_7'];
    }

    /**
     * Sets _4_7
     *
     * @param float|null $_4_7 _4_7
     *
     * @return self
     */
    public function set47($_4_7)
    {

        if (is_null($_4_7)) {
            throw new \InvalidArgumentException('non-nullable _4_7 cannot be null');
        }

        $this->container['_4_7'] = $_4_7;

        return $this;
    }

    /**
     * Gets _5_0
     *
     * @return float|null
     */
    public function get50()
    {
        return $this->container['_5_0'];
    }

    /**
     * Sets _5_0
     *
     * @param float|null $_5_0 _5_0
     *
     * @return self
     */
    public function set50($_5_0)
    {

        if (is_null($_5_0)) {
            throw new \InvalidArgumentException('non-nullable _5_0 cannot be null');
        }

        $this->container['_5_0'] = $_5_0;

        return $this;
    }

    /**
     * Gets _5_1
     *
     * @return float|null
     */
    public function get51()
    {
        return $this->container['_5_1'];
    }

    /**
     * Sets _5_1
     *
     * @param float|null $_5_1 _5_1
     *
     * @return self
     */
    public function set51($_5_1)
    {

        if (is_null($_5_1)) {
            throw new \InvalidArgumentException('non-nullable _5_1 cannot be null');
        }

        $this->container['_5_1'] = $_5_1;

        return $this;
    }

    /**
     * Gets _5_2
     *
     * @return float|null
     */
    public function get52()
    {
        return $this->container['_5_2'];
    }

    /**
     * Sets _5_2
     *
     * @param float|null $_5_2 _5_2
     *
     * @return self
     */
    public function set52($_5_2)
    {

        if (is_null($_5_2)) {
            throw new \InvalidArgumentException('non-nullable _5_2 cannot be null');
        }

        $this->container['_5_2'] = $_5_2;

        return $this;
    }

    /**
     * Gets _5_3
     *
     * @return float|null
     */
    public function get53()
    {
        return $this->container['_5_3'];
    }

    /**
     * Sets _5_3
     *
     * @param float|null $_5_3 _5_3
     *
     * @return self
     */
    public function set53($_5_3)
    {

        if (is_null($_5_3)) {
            throw new \InvalidArgumentException('non-nullable _5_3 cannot be null');
        }

        $this->container['_5_3'] = $_5_3;

        return $this;
    }

    /**
     * Gets _5_4
     *
     * @return float|null
     */
    public function get54()
    {
        return $this->container['_5_4'];
    }

    /**
     * Sets _5_4
     *
     * @param float|null $_5_4 _5_4
     *
     * @return self
     */
    public function set54($_5_4)
    {

        if (is_null($_5_4)) {
            throw new \InvalidArgumentException('non-nullable _5_4 cannot be null');
        }

        $this->container['_5_4'] = $_5_4;

        return $this;
    }

    /**
     * Gets _5_5
     *
     * @return float|null
     */
    public function get55()
    {
        return $this->container['_5_5'];
    }

    /**
     * Sets _5_5
     *
     * @param float|null $_5_5 _5_5
     *
     * @return self
     */
    public function set55($_5_5)
    {

        if (is_null($_5_5)) {
            throw new \InvalidArgumentException('non-nullable _5_5 cannot be null');
        }

        $this->container['_5_5'] = $_5_5;

        return $this;
    }

    /**
     * Gets _5_6
     *
     * @return float|null
     */
    public function get56()
    {
        return $this->container['_5_6'];
    }

    /**
     * Sets _5_6
     *
     * @param float|null $_5_6 _5_6
     *
     * @return self
     */
    public function set56($_5_6)
    {

        if (is_null($_5_6)) {
            throw new \InvalidArgumentException('non-nullable _5_6 cannot be null');
        }

        $this->container['_5_6'] = $_5_6;

        return $this;
    }

    /**
     * Gets _6_0
     *
     * @return float|null
     */
    public function get60()
    {
        return $this->container['_6_0'];
    }

    /**
     * Sets _6_0
     *
     * @param float|null $_6_0 _6_0
     *
     * @return self
     */
    public function set60($_6_0)
    {

        if (is_null($_6_0)) {
            throw new \InvalidArgumentException('non-nullable _6_0 cannot be null');
        }

        $this->container['_6_0'] = $_6_0;

        return $this;
    }

    /**
     * Gets _6_1
     *
     * @return float|null
     */
    public function get61()
    {
        return $this->container['_6_1'];
    }

    /**
     * Sets _6_1
     *
     * @param float|null $_6_1 _6_1
     *
     * @return self
     */
    public function set61($_6_1)
    {

        if (is_null($_6_1)) {
            throw new \InvalidArgumentException('non-nullable _6_1 cannot be null');
        }

        $this->container['_6_1'] = $_6_1;

        return $this;
    }

    /**
     * Gets _6_2
     *
     * @return float|null
     */
    public function get62()
    {
        return $this->container['_6_2'];
    }

    /**
     * Sets _6_2
     *
     * @param float|null $_6_2 _6_2
     *
     * @return self
     */
    public function set62($_6_2)
    {

        if (is_null($_6_2)) {
            throw new \InvalidArgumentException('non-nullable _6_2 cannot be null');
        }

        $this->container['_6_2'] = $_6_2;

        return $this;
    }

    /**
     * Gets _6_3
     *
     * @return float|null
     */
    public function get63()
    {
        return $this->container['_6_3'];
    }

    /**
     * Sets _6_3
     *
     * @param float|null $_6_3 _6_3
     *
     * @return self
     */
    public function set63($_6_3)
    {

        if (is_null($_6_3)) {
            throw new \InvalidArgumentException('non-nullable _6_3 cannot be null');
        }

        $this->container['_6_3'] = $_6_3;

        return $this;
    }

    /**
     * Gets _6_4
     *
     * @return float|null
     */
    public function get64()
    {
        return $this->container['_6_4'];
    }

    /**
     * Sets _6_4
     *
     * @param float|null $_6_4 _6_4
     *
     * @return self
     */
    public function set64($_6_4)
    {

        if (is_null($_6_4)) {
            throw new \InvalidArgumentException('non-nullable _6_4 cannot be null');
        }

        $this->container['_6_4'] = $_6_4;

        return $this;
    }

    /**
     * Gets _6_5
     *
     * @return float|null
     */
    public function get65()
    {
        return $this->container['_6_5'];
    }

    /**
     * Sets _6_5
     *
     * @param float|null $_6_5 _6_5
     *
     * @return self
     */
    public function set65($_6_5)
    {

        if (is_null($_6_5)) {
            throw new \InvalidArgumentException('non-nullable _6_5 cannot be null');
        }

        $this->container['_6_5'] = $_6_5;

        return $this;
    }

    /**
     * Gets _6_6
     *
     * @return float|null
     */
    public function get66()
    {
        return $this->container['_6_6'];
    }

    /**
     * Sets _6_6
     *
     * @param float|null $_6_6 _6_6
     *
     * @return self
     */
    public function set66($_6_6)
    {

        if (is_null($_6_6)) {
            throw new \InvalidArgumentException('non-nullable _6_6 cannot be null');
        }

        $this->container['_6_6'] = $_6_6;

        return $this;
    }

    /**
     * Gets _7_0
     *
     * @return float|null
     */
    public function get70()
    {
        return $this->container['_7_0'];
    }

    /**
     * Sets _7_0
     *
     * @param float|null $_7_0 _7_0
     *
     * @return self
     */
    public function set70($_7_0)
    {

        if (is_null($_7_0)) {
            throw new \InvalidArgumentException('non-nullable _7_0 cannot be null');
        }

        $this->container['_7_0'] = $_7_0;

        return $this;
    }

    /**
     * Gets _7_1
     *
     * @return float|null
     */
    public function get71()
    {
        return $this->container['_7_1'];
    }

    /**
     * Sets _7_1
     *
     * @param float|null $_7_1 _7_1
     *
     * @return self
     */
    public function set71($_7_1)
    {

        if (is_null($_7_1)) {
            throw new \InvalidArgumentException('non-nullable _7_1 cannot be null');
        }

        $this->container['_7_1'] = $_7_1;

        return $this;
    }

    /**
     * Gets _7_2
     *
     * @return float|null
     */
    public function get72()
    {
        return $this->container['_7_2'];
    }

    /**
     * Sets _7_2
     *
     * @param float|null $_7_2 _7_2
     *
     * @return self
     */
    public function set72($_7_2)
    {

        if (is_null($_7_2)) {
            throw new \InvalidArgumentException('non-nullable _7_2 cannot be null');
        }

        $this->container['_7_2'] = $_7_2;

        return $this;
    }

    /**
     * Gets _7_3
     *
     * @return float|null
     */
    public function get73()
    {
        return $this->container['_7_3'];
    }

    /**
     * Sets _7_3
     *
     * @param float|null $_7_3 _7_3
     *
     * @return self
     */
    public function set73($_7_3)
    {

        if (is_null($_7_3)) {
            throw new \InvalidArgumentException('non-nullable _7_3 cannot be null');
        }

        $this->container['_7_3'] = $_7_3;

        return $this;
    }

    /**
     * Gets _7_4
     *
     * @return float|null
     */
    public function get74()
    {
        return $this->container['_7_4'];
    }

    /**
     * Sets _7_4
     *
     * @param float|null $_7_4 _7_4
     *
     * @return self
     */
    public function set74($_7_4)
    {

        if (is_null($_7_4)) {
            throw new \InvalidArgumentException('non-nullable _7_4 cannot be null');
        }

        $this->container['_7_4'] = $_7_4;

        return $this;
    }

    /**
     * Gets _7_5
     *
     * @return float|null
     */
    public function get75()
    {
        return $this->container['_7_5'];
    }

    /**
     * Sets _7_5
     *
     * @param float|null $_7_5 _7_5
     *
     * @return self
     */
    public function set75($_7_5)
    {

        if (is_null($_7_5)) {
            throw new \InvalidArgumentException('non-nullable _7_5 cannot be null');
        }

        $this->container['_7_5'] = $_7_5;

        return $this;
    }

    /**
     * Gets _8_0
     *
     * @return float|null
     */
    public function get80()
    {
        return $this->container['_8_0'];
    }

    /**
     * Sets _8_0
     *
     * @param float|null $_8_0 _8_0
     *
     * @return self
     */
    public function set80($_8_0)
    {

        if (is_null($_8_0)) {
            throw new \InvalidArgumentException('non-nullable _8_0 cannot be null');
        }

        $this->container['_8_0'] = $_8_0;

        return $this;
    }

    /**
     * Gets _8_1
     *
     * @return float|null
     */
    public function get81()
    {
        return $this->container['_8_1'];
    }

    /**
     * Sets _8_1
     *
     * @param float|null $_8_1 _8_1
     *
     * @return self
     */
    public function set81($_8_1)
    {

        if (is_null($_8_1)) {
            throw new \InvalidArgumentException('non-nullable _8_1 cannot be null');
        }

        $this->container['_8_1'] = $_8_1;

        return $this;
    }

    /**
     * Gets _8_2
     *
     * @return float|null
     */
    public function get82()
    {
        return $this->container['_8_2'];
    }

    /**
     * Sets _8_2
     *
     * @param float|null $_8_2 _8_2
     *
     * @return self
     */
    public function set82($_8_2)
    {

        if (is_null($_8_2)) {
            throw new \InvalidArgumentException('non-nullable _8_2 cannot be null');
        }

        $this->container['_8_2'] = $_8_2;

        return $this;
    }

    /**
     * Gets _8_3
     *
     * @return float|null
     */
    public function get83()
    {
        return $this->container['_8_3'];
    }

    /**
     * Sets _8_3
     *
     * @param float|null $_8_3 _8_3
     *
     * @return self
     */
    public function set83($_8_3)
    {

        if (is_null($_8_3)) {
            throw new \InvalidArgumentException('non-nullable _8_3 cannot be null');
        }

        $this->container['_8_3'] = $_8_3;

        return $this;
    }

    /**
     * Gets _8_4
     *
     * @return float|null
     */
    public function get84()
    {
        return $this->container['_8_4'];
    }

    /**
     * Sets _8_4
     *
     * @param float|null $_8_4 _8_4
     *
     * @return self
     */
    public function set84($_8_4)
    {

        if (is_null($_8_4)) {
            throw new \InvalidArgumentException('non-nullable _8_4 cannot be null');
        }

        $this->container['_8_4'] = $_8_4;

        return $this;
    }

    /**
     * Gets _9_0
     *
     * @return float|null
     */
    public function get90()
    {
        return $this->container['_9_0'];
    }

    /**
     * Sets _9_0
     *
     * @param float|null $_9_0 _9_0
     *
     * @return self
     */
    public function set90($_9_0)
    {

        if (is_null($_9_0)) {
            throw new \InvalidArgumentException('non-nullable _9_0 cannot be null');
        }

        $this->container['_9_0'] = $_9_0;

        return $this;
    }

    /**
     * Gets _9_1
     *
     * @return float|null
     */
    public function get91()
    {
        return $this->container['_9_1'];
    }

    /**
     * Sets _9_1
     *
     * @param float|null $_9_1 _9_1
     *
     * @return self
     */
    public function set91($_9_1)
    {

        if (is_null($_9_1)) {
            throw new \InvalidArgumentException('non-nullable _9_1 cannot be null');
        }

        $this->container['_9_1'] = $_9_1;

        return $this;
    }

    /**
     * Gets _9_2
     *
     * @return float|null
     */
    public function get92()
    {
        return $this->container['_9_2'];
    }

    /**
     * Sets _9_2
     *
     * @param float|null $_9_2 _9_2
     *
     * @return self
     */
    public function set92($_9_2)
    {

        if (is_null($_9_2)) {
            throw new \InvalidArgumentException('non-nullable _9_2 cannot be null');
        }

        $this->container['_9_2'] = $_9_2;

        return $this;
    }

    /**
     * Gets _9_3
     *
     * @return float|null
     */
    public function get93()
    {
        return $this->container['_9_3'];
    }

    /**
     * Sets _9_3
     *
     * @param float|null $_9_3 _9_3
     *
     * @return self
     */
    public function set93($_9_3)
    {

        if (is_null($_9_3)) {
            throw new \InvalidArgumentException('non-nullable _9_3 cannot be null');
        }

        $this->container['_9_3'] = $_9_3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


