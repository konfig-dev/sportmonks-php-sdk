<?php
/**
 * SportSquadsByTeamIdResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sportmonks
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Sportmonks\Model;

use \ArrayAccess;
use \Sportmonks\ObjectSerializer;

/**
 * SportSquadsByTeamIdResponseDataInner Class Doc Comment
 *
 * @category Class
 * @package  Sportmonks
 * @implements \ArrayAccess<string, mixed>
 */
class SportSquadsByTeamIdResponseDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SportSquadsByTeamIdResponse_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'transfer_id' => '\Sportmonks\Model\SportSquadsByTeamIdResponseDataInnerTransferId',
        'player_id' => 'float',
        'team_id' => 'float',
        'position_id' => 'float',
        'detailed_position_id' => 'float',
        'active' => 'bool',
        'yersey_number' => '\Sportmonks\Model\SportSquadsByTeamIdResponseDataInnerYerseyNumber',
        'start' => 'string',
        'end' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'transfer_id' => null,
        'player_id' => null,
        'team_id' => null,
        'position_id' => null,
        'detailed_position_id' => null,
        'active' => null,
        'yersey_number' => null,
        'start' => null,
        'end' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'transfer_id' => false,
		'player_id' => false,
		'team_id' => false,
		'position_id' => false,
		'detailed_position_id' => false,
		'active' => false,
		'yersey_number' => false,
		'start' => false,
		'end' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transfer_id' => 'transfer_id',
        'player_id' => 'player_id',
        'team_id' => 'team_id',
        'position_id' => 'position_id',
        'detailed_position_id' => 'detailed_position_id',
        'active' => 'active',
        'yersey_number' => 'yersey_number',
        'start' => 'start',
        'end' => 'end'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transfer_id' => 'setTransferId',
        'player_id' => 'setPlayerId',
        'team_id' => 'setTeamId',
        'position_id' => 'setPositionId',
        'detailed_position_id' => 'setDetailedPositionId',
        'active' => 'setActive',
        'yersey_number' => 'setYerseyNumber',
        'start' => 'setStart',
        'end' => 'setEnd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transfer_id' => 'getTransferId',
        'player_id' => 'getPlayerId',
        'team_id' => 'getTeamId',
        'position_id' => 'getPositionId',
        'detailed_position_id' => 'getDetailedPositionId',
        'active' => 'getActive',
        'yersey_number' => 'getYerseyNumber',
        'start' => 'getStart',
        'end' => 'getEnd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('transfer_id', $data ?? [], null);
        $this->setIfExists('player_id', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('position_id', $data ?? [], null);
        $this->setIfExists('detailed_position_id', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('yersey_number', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('end', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transfer_id
     *
     * @return \Sportmonks\Model\SportSquadsByTeamIdResponseDataInnerTransferId|null
     */
    public function getTransferId()
    {
        return $this->container['transfer_id'];
    }

    /**
     * Sets transfer_id
     *
     * @param \Sportmonks\Model\SportSquadsByTeamIdResponseDataInnerTransferId|null $transfer_id transfer_id
     *
     * @return self
     */
    public function setTransferId($transfer_id)
    {

        if (is_null($transfer_id)) {
            throw new \InvalidArgumentException('non-nullable transfer_id cannot be null');
        }

        $this->container['transfer_id'] = $transfer_id;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return float|null
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param float|null $player_id player_id
     *
     * @return self
     */
    public function setPlayerId($player_id)
    {

        if (is_null($player_id)) {
            throw new \InvalidArgumentException('non-nullable player_id cannot be null');
        }

        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return float|null
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param float|null $team_id team_id
     *
     * @return self
     */
    public function setTeamId($team_id)
    {

        if (is_null($team_id)) {
            throw new \InvalidArgumentException('non-nullable team_id cannot be null');
        }

        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets position_id
     *
     * @return float|null
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param float|null $position_id position_id
     *
     * @return self
     */
    public function setPositionId($position_id)
    {

        if (is_null($position_id)) {
            throw new \InvalidArgumentException('non-nullable position_id cannot be null');
        }

        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets detailed_position_id
     *
     * @return float|null
     */
    public function getDetailedPositionId()
    {
        return $this->container['detailed_position_id'];
    }

    /**
     * Sets detailed_position_id
     *
     * @param float|null $detailed_position_id detailed_position_id
     *
     * @return self
     */
    public function setDetailedPositionId($detailed_position_id)
    {

        if (is_null($detailed_position_id)) {
            throw new \InvalidArgumentException('non-nullable detailed_position_id cannot be null');
        }

        $this->container['detailed_position_id'] = $detailed_position_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {

        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }

        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets yersey_number
     *
     * @return \Sportmonks\Model\SportSquadsByTeamIdResponseDataInnerYerseyNumber|null
     */
    public function getYerseyNumber()
    {
        return $this->container['yersey_number'];
    }

    /**
     * Sets yersey_number
     *
     * @param \Sportmonks\Model\SportSquadsByTeamIdResponseDataInnerYerseyNumber|null $yersey_number yersey_number
     *
     * @return self
     */
    public function setYerseyNumber($yersey_number)
    {

        if (is_null($yersey_number)) {
            throw new \InvalidArgumentException('non-nullable yersey_number cannot be null');
        }

        $this->container['yersey_number'] = $yersey_number;

        return $this;
    }

    /**
     * Gets start
     *
     * @return string|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string|null $start start
     *
     * @return self
     */
    public function setStart($start)
    {

        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }

        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return string|null
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param string|null $end end
     *
     * @return self
     */
    public function setEnd($end)
    {

        if (is_null($end)) {
            throw new \InvalidArgumentException('non-nullable end cannot be null');
        }

        $this->container['end'] = $end;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


