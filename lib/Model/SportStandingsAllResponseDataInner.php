<?php
/**
 * SportStandingsAllResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sportmonks
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Sportmonks\Model;

use \ArrayAccess;
use \Sportmonks\ObjectSerializer;

/**
 * SportStandingsAllResponseDataInner Class Doc Comment
 *
 * @category Class
 * @package  Sportmonks
 * @implements \ArrayAccess<string, mixed>
 */
class SportStandingsAllResponseDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SportStandingsAllResponse_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'participant_id' => 'float',
        'sport_id' => 'float',
        'league_id' => 'float',
        'season_id' => 'float',
        'stage_id' => 'float',
        'group_id' => 'string',
        'round_id' => 'float',
        'standing_rule_id' => '\Sportmonks\Model\SportStandingsAllResponseDataInnerStandingRuleId',
        'position' => 'float',
        'result' => 'string',
        'points' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'participant_id' => null,
        'sport_id' => null,
        'league_id' => null,
        'season_id' => null,
        'stage_id' => null,
        'group_id' => null,
        'round_id' => null,
        'standing_rule_id' => null,
        'position' => null,
        'result' => null,
        'points' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'participant_id' => false,
		'sport_id' => false,
		'league_id' => false,
		'season_id' => false,
		'stage_id' => false,
		'group_id' => true,
		'round_id' => false,
		'standing_rule_id' => false,
		'position' => false,
		'result' => false,
		'points' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'participant_id' => 'participant_id',
        'sport_id' => 'sport_id',
        'league_id' => 'league_id',
        'season_id' => 'season_id',
        'stage_id' => 'stage_id',
        'group_id' => 'group_id',
        'round_id' => 'round_id',
        'standing_rule_id' => 'standing_rule_id',
        'position' => 'position',
        'result' => 'result',
        'points' => 'points'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'participant_id' => 'setParticipantId',
        'sport_id' => 'setSportId',
        'league_id' => 'setLeagueId',
        'season_id' => 'setSeasonId',
        'stage_id' => 'setStageId',
        'group_id' => 'setGroupId',
        'round_id' => 'setRoundId',
        'standing_rule_id' => 'setStandingRuleId',
        'position' => 'setPosition',
        'result' => 'setResult',
        'points' => 'setPoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'participant_id' => 'getParticipantId',
        'sport_id' => 'getSportId',
        'league_id' => 'getLeagueId',
        'season_id' => 'getSeasonId',
        'stage_id' => 'getStageId',
        'group_id' => 'getGroupId',
        'round_id' => 'getRoundId',
        'standing_rule_id' => 'getStandingRuleId',
        'position' => 'getPosition',
        'result' => 'getResult',
        'points' => 'getPoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('participant_id', $data ?? [], null);
        $this->setIfExists('sport_id', $data ?? [], null);
        $this->setIfExists('league_id', $data ?? [], null);
        $this->setIfExists('season_id', $data ?? [], null);
        $this->setIfExists('stage_id', $data ?? [], null);
        $this->setIfExists('group_id', $data ?? [], null);
        $this->setIfExists('round_id', $data ?? [], null);
        $this->setIfExists('standing_rule_id', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('points', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return float|null
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param float|null $participant_id participant_id
     *
     * @return self
     */
    public function setParticipantId($participant_id)
    {

        if (is_null($participant_id)) {
            throw new \InvalidArgumentException('non-nullable participant_id cannot be null');
        }

        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets sport_id
     *
     * @return float|null
     */
    public function getSportId()
    {
        return $this->container['sport_id'];
    }

    /**
     * Sets sport_id
     *
     * @param float|null $sport_id sport_id
     *
     * @return self
     */
    public function setSportId($sport_id)
    {

        if (is_null($sport_id)) {
            throw new \InvalidArgumentException('non-nullable sport_id cannot be null');
        }

        $this->container['sport_id'] = $sport_id;

        return $this;
    }

    /**
     * Gets league_id
     *
     * @return float|null
     */
    public function getLeagueId()
    {
        return $this->container['league_id'];
    }

    /**
     * Sets league_id
     *
     * @param float|null $league_id league_id
     *
     * @return self
     */
    public function setLeagueId($league_id)
    {

        if (is_null($league_id)) {
            throw new \InvalidArgumentException('non-nullable league_id cannot be null');
        }

        $this->container['league_id'] = $league_id;

        return $this;
    }

    /**
     * Gets season_id
     *
     * @return float|null
     */
    public function getSeasonId()
    {
        return $this->container['season_id'];
    }

    /**
     * Sets season_id
     *
     * @param float|null $season_id season_id
     *
     * @return self
     */
    public function setSeasonId($season_id)
    {

        if (is_null($season_id)) {
            throw new \InvalidArgumentException('non-nullable season_id cannot be null');
        }

        $this->container['season_id'] = $season_id;

        return $this;
    }

    /**
     * Gets stage_id
     *
     * @return float|null
     */
    public function getStageId()
    {
        return $this->container['stage_id'];
    }

    /**
     * Sets stage_id
     *
     * @param float|null $stage_id stage_id
     *
     * @return self
     */
    public function setStageId($stage_id)
    {

        if (is_null($stage_id)) {
            throw new \InvalidArgumentException('non-nullable stage_id cannot be null');
        }

        $this->container['stage_id'] = $stage_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string|null $group_id group_id
     *
     * @return self
     */
    public function setGroupId($group_id)
    {

        if (is_null($group_id)) {
            array_push($this->openAPINullablesSetToNull, 'group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets round_id
     *
     * @return float|null
     */
    public function getRoundId()
    {
        return $this->container['round_id'];
    }

    /**
     * Sets round_id
     *
     * @param float|null $round_id round_id
     *
     * @return self
     */
    public function setRoundId($round_id)
    {

        if (is_null($round_id)) {
            throw new \InvalidArgumentException('non-nullable round_id cannot be null');
        }

        $this->container['round_id'] = $round_id;

        return $this;
    }

    /**
     * Gets standing_rule_id
     *
     * @return \Sportmonks\Model\SportStandingsAllResponseDataInnerStandingRuleId|null
     */
    public function getStandingRuleId()
    {
        return $this->container['standing_rule_id'];
    }

    /**
     * Sets standing_rule_id
     *
     * @param \Sportmonks\Model\SportStandingsAllResponseDataInnerStandingRuleId|null $standing_rule_id standing_rule_id
     *
     * @return self
     */
    public function setStandingRuleId($standing_rule_id)
    {

        if (is_null($standing_rule_id)) {
            throw new \InvalidArgumentException('non-nullable standing_rule_id cannot be null');
        }

        $this->container['standing_rule_id'] = $standing_rule_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {

        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }

        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {

        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }

        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets points
     *
     * @return float|null
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param float|null $points points
     *
     * @return self
     */
    public function setPoints($points)
    {

        if (is_null($points)) {
            throw new \InvalidArgumentException('non-nullable points cannot be null');
        }

        $this->container['points'] = $points;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


