<?php
/**
 * SportStatesBySportResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sportmonks
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Sportmonks\Model;

use \ArrayAccess;
use \Sportmonks\ObjectSerializer;

/**
 * SportStatesBySportResponseDataInner Class Doc Comment
 *
 * @category Class
 * @package  Sportmonks
 * @implements \ArrayAccess<string, mixed>
 */
class SportStatesBySportResponseDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SportStatesBySportResponse_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'state' => 'string',
        'name' => 'string',
        'short_name' => 'string',
        'developer_name' => 'string',
        'is_live' => 'bool',
        'is_pending' => 'bool',
        'is_period_end' => 'bool',
        'is_final_state' => 'bool',
        'is_cancelled' => 'bool',
        'is_final_standing_state' => 'bool',
        'is_completed' => 'bool',
        'type_id' => '\Sportmonks\Model\SportStatesBySportResponseDataInnerTypeId',
        'is_deleted' => 'bool',
        'is_notstarted' => 'bool',
        'sections_active' => 'bool',
        'schedule_overrule' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'state' => null,
        'name' => null,
        'short_name' => null,
        'developer_name' => null,
        'is_live' => null,
        'is_pending' => null,
        'is_period_end' => null,
        'is_final_state' => null,
        'is_cancelled' => null,
        'is_final_standing_state' => null,
        'is_completed' => null,
        'type_id' => null,
        'is_deleted' => null,
        'is_notstarted' => null,
        'sections_active' => null,
        'schedule_overrule' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'state' => false,
		'name' => false,
		'short_name' => false,
		'developer_name' => false,
		'is_live' => false,
		'is_pending' => false,
		'is_period_end' => false,
		'is_final_state' => false,
		'is_cancelled' => false,
		'is_final_standing_state' => false,
		'is_completed' => false,
		'type_id' => false,
		'is_deleted' => false,
		'is_notstarted' => false,
		'sections_active' => false,
		'schedule_overrule' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'name' => 'name',
        'short_name' => 'short_name',
        'developer_name' => 'developer_name',
        'is_live' => 'is_live',
        'is_pending' => 'is_pending',
        'is_period_end' => 'is_period_end',
        'is_final_state' => 'is_final_state',
        'is_cancelled' => 'is_cancelled',
        'is_final_standing_state' => 'is_final_standing_state',
        'is_completed' => 'is_completed',
        'type_id' => 'type_id',
        'is_deleted' => 'is_deleted',
        'is_notstarted' => 'is_notstarted',
        'sections_active' => 'sections_active',
        'schedule_overrule' => 'schedule_overrule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'name' => 'setName',
        'short_name' => 'setShortName',
        'developer_name' => 'setDeveloperName',
        'is_live' => 'setIsLive',
        'is_pending' => 'setIsPending',
        'is_period_end' => 'setIsPeriodEnd',
        'is_final_state' => 'setIsFinalState',
        'is_cancelled' => 'setIsCancelled',
        'is_final_standing_state' => 'setIsFinalStandingState',
        'is_completed' => 'setIsCompleted',
        'type_id' => 'setTypeId',
        'is_deleted' => 'setIsDeleted',
        'is_notstarted' => 'setIsNotstarted',
        'sections_active' => 'setSectionsActive',
        'schedule_overrule' => 'setScheduleOverrule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'name' => 'getName',
        'short_name' => 'getShortName',
        'developer_name' => 'getDeveloperName',
        'is_live' => 'getIsLive',
        'is_pending' => 'getIsPending',
        'is_period_end' => 'getIsPeriodEnd',
        'is_final_state' => 'getIsFinalState',
        'is_cancelled' => 'getIsCancelled',
        'is_final_standing_state' => 'getIsFinalStandingState',
        'is_completed' => 'getIsCompleted',
        'type_id' => 'getTypeId',
        'is_deleted' => 'getIsDeleted',
        'is_notstarted' => 'getIsNotstarted',
        'sections_active' => 'getSectionsActive',
        'schedule_overrule' => 'getScheduleOverrule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('developer_name', $data ?? [], null);
        $this->setIfExists('is_live', $data ?? [], null);
        $this->setIfExists('is_pending', $data ?? [], null);
        $this->setIfExists('is_period_end', $data ?? [], null);
        $this->setIfExists('is_final_state', $data ?? [], null);
        $this->setIfExists('is_cancelled', $data ?? [], null);
        $this->setIfExists('is_final_standing_state', $data ?? [], null);
        $this->setIfExists('is_completed', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_notstarted', $data ?? [], null);
        $this->setIfExists('sections_active', $data ?? [], null);
        $this->setIfExists('schedule_overrule', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string|null $short_name short_name
     *
     * @return self
     */
    public function setShortName($short_name)
    {

        if (is_null($short_name)) {
            throw new \InvalidArgumentException('non-nullable short_name cannot be null');
        }

        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets developer_name
     *
     * @return string|null
     */
    public function getDeveloperName()
    {
        return $this->container['developer_name'];
    }

    /**
     * Sets developer_name
     *
     * @param string|null $developer_name developer_name
     *
     * @return self
     */
    public function setDeveloperName($developer_name)
    {

        if (is_null($developer_name)) {
            throw new \InvalidArgumentException('non-nullable developer_name cannot be null');
        }

        $this->container['developer_name'] = $developer_name;

        return $this;
    }

    /**
     * Gets is_live
     *
     * @return bool|null
     */
    public function getIsLive()
    {
        return $this->container['is_live'];
    }

    /**
     * Sets is_live
     *
     * @param bool|null $is_live is_live
     *
     * @return self
     */
    public function setIsLive($is_live)
    {

        if (is_null($is_live)) {
            throw new \InvalidArgumentException('non-nullable is_live cannot be null');
        }

        $this->container['is_live'] = $is_live;

        return $this;
    }

    /**
     * Gets is_pending
     *
     * @return bool|null
     */
    public function getIsPending()
    {
        return $this->container['is_pending'];
    }

    /**
     * Sets is_pending
     *
     * @param bool|null $is_pending is_pending
     *
     * @return self
     */
    public function setIsPending($is_pending)
    {

        if (is_null($is_pending)) {
            throw new \InvalidArgumentException('non-nullable is_pending cannot be null');
        }

        $this->container['is_pending'] = $is_pending;

        return $this;
    }

    /**
     * Gets is_period_end
     *
     * @return bool|null
     */
    public function getIsPeriodEnd()
    {
        return $this->container['is_period_end'];
    }

    /**
     * Sets is_period_end
     *
     * @param bool|null $is_period_end is_period_end
     *
     * @return self
     */
    public function setIsPeriodEnd($is_period_end)
    {

        if (is_null($is_period_end)) {
            throw new \InvalidArgumentException('non-nullable is_period_end cannot be null');
        }

        $this->container['is_period_end'] = $is_period_end;

        return $this;
    }

    /**
     * Gets is_final_state
     *
     * @return bool|null
     */
    public function getIsFinalState()
    {
        return $this->container['is_final_state'];
    }

    /**
     * Sets is_final_state
     *
     * @param bool|null $is_final_state is_final_state
     *
     * @return self
     */
    public function setIsFinalState($is_final_state)
    {

        if (is_null($is_final_state)) {
            throw new \InvalidArgumentException('non-nullable is_final_state cannot be null');
        }

        $this->container['is_final_state'] = $is_final_state;

        return $this;
    }

    /**
     * Gets is_cancelled
     *
     * @return bool|null
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     *
     * @param bool|null $is_cancelled is_cancelled
     *
     * @return self
     */
    public function setIsCancelled($is_cancelled)
    {

        if (is_null($is_cancelled)) {
            throw new \InvalidArgumentException('non-nullable is_cancelled cannot be null');
        }

        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets is_final_standing_state
     *
     * @return bool|null
     */
    public function getIsFinalStandingState()
    {
        return $this->container['is_final_standing_state'];
    }

    /**
     * Sets is_final_standing_state
     *
     * @param bool|null $is_final_standing_state is_final_standing_state
     *
     * @return self
     */
    public function setIsFinalStandingState($is_final_standing_state)
    {

        if (is_null($is_final_standing_state)) {
            throw new \InvalidArgumentException('non-nullable is_final_standing_state cannot be null');
        }

        $this->container['is_final_standing_state'] = $is_final_standing_state;

        return $this;
    }

    /**
     * Gets is_completed
     *
     * @return bool|null
     */
    public function getIsCompleted()
    {
        return $this->container['is_completed'];
    }

    /**
     * Sets is_completed
     *
     * @param bool|null $is_completed is_completed
     *
     * @return self
     */
    public function setIsCompleted($is_completed)
    {

        if (is_null($is_completed)) {
            throw new \InvalidArgumentException('non-nullable is_completed cannot be null');
        }

        $this->container['is_completed'] = $is_completed;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return \Sportmonks\Model\SportStatesBySportResponseDataInnerTypeId|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param \Sportmonks\Model\SportStatesBySportResponseDataInnerTypeId|null $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {

        if (is_null($type_id)) {
            throw new \InvalidArgumentException('non-nullable type_id cannot be null');
        }

        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {

        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }

        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_notstarted
     *
     * @return bool|null
     */
    public function getIsNotstarted()
    {
        return $this->container['is_notstarted'];
    }

    /**
     * Sets is_notstarted
     *
     * @param bool|null $is_notstarted is_notstarted
     *
     * @return self
     */
    public function setIsNotstarted($is_notstarted)
    {

        if (is_null($is_notstarted)) {
            throw new \InvalidArgumentException('non-nullable is_notstarted cannot be null');
        }

        $this->container['is_notstarted'] = $is_notstarted;

        return $this;
    }

    /**
     * Gets sections_active
     *
     * @return bool|null
     */
    public function getSectionsActive()
    {
        return $this->container['sections_active'];
    }

    /**
     * Sets sections_active
     *
     * @param bool|null $sections_active sections_active
     *
     * @return self
     */
    public function setSectionsActive($sections_active)
    {

        if (is_null($sections_active)) {
            throw new \InvalidArgumentException('non-nullable sections_active cannot be null');
        }

        $this->container['sections_active'] = $sections_active;

        return $this;
    }

    /**
     * Gets schedule_overrule
     *
     * @return bool|null
     */
    public function getScheduleOverrule()
    {
        return $this->container['schedule_overrule'];
    }

    /**
     * Sets schedule_overrule
     *
     * @param bool|null $schedule_overrule schedule_overrule
     *
     * @return self
     */
    public function setScheduleOverrule($schedule_overrule)
    {

        if (is_null($schedule_overrule)) {
            throw new \InvalidArgumentException('non-nullable schedule_overrule cannot be null');
        }

        $this->container['schedule_overrule'] = $schedule_overrule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


