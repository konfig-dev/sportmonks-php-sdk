<?php
/**
 * SportTransfersByTeamIdResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sportmonks
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Sportmonks\Model;

use \ArrayAccess;
use \Sportmonks\ObjectSerializer;

/**
 * SportTransfersByTeamIdResponseDataInner Class Doc Comment
 *
 * @category Class
 * @package  Sportmonks
 * @implements \ArrayAccess<string, mixed>
 */
class SportTransfersByTeamIdResponseDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SportTransfersByTeamIdResponse_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'sport_id' => 'float',
        'player_id' => 'float',
        'type_id' => 'float',
        'from_team_id' => 'float',
        'to_team_id' => 'float',
        'position_id' => 'float',
        'detailed_position_id' => 'float',
        'date' => 'string',
        'career_ended' => 'bool',
        'completed' => 'bool',
        'completed_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'sport_id' => null,
        'player_id' => null,
        'type_id' => null,
        'from_team_id' => null,
        'to_team_id' => null,
        'position_id' => null,
        'detailed_position_id' => null,
        'date' => null,
        'career_ended' => null,
        'completed' => null,
        'completed_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'sport_id' => false,
		'player_id' => false,
		'type_id' => false,
		'from_team_id' => false,
		'to_team_id' => false,
		'position_id' => true,
		'detailed_position_id' => true,
		'date' => false,
		'career_ended' => false,
		'completed' => false,
		'completed_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sport_id' => 'sport_id',
        'player_id' => 'player_id',
        'type_id' => 'type_id',
        'from_team_id' => 'from_team_id',
        'to_team_id' => 'to_team_id',
        'position_id' => 'position_id',
        'detailed_position_id' => 'detailed_position_id',
        'date' => 'date',
        'career_ended' => 'career_ended',
        'completed' => 'completed',
        'completed_at' => 'completed_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sport_id' => 'setSportId',
        'player_id' => 'setPlayerId',
        'type_id' => 'setTypeId',
        'from_team_id' => 'setFromTeamId',
        'to_team_id' => 'setToTeamId',
        'position_id' => 'setPositionId',
        'detailed_position_id' => 'setDetailedPositionId',
        'date' => 'setDate',
        'career_ended' => 'setCareerEnded',
        'completed' => 'setCompleted',
        'completed_at' => 'setCompletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sport_id' => 'getSportId',
        'player_id' => 'getPlayerId',
        'type_id' => 'getTypeId',
        'from_team_id' => 'getFromTeamId',
        'to_team_id' => 'getToTeamId',
        'position_id' => 'getPositionId',
        'detailed_position_id' => 'getDetailedPositionId',
        'date' => 'getDate',
        'career_ended' => 'getCareerEnded',
        'completed' => 'getCompleted',
        'completed_at' => 'getCompletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sport_id', $data ?? [], null);
        $this->setIfExists('player_id', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('from_team_id', $data ?? [], null);
        $this->setIfExists('to_team_id', $data ?? [], null);
        $this->setIfExists('position_id', $data ?? [], null);
        $this->setIfExists('detailed_position_id', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('career_ended', $data ?? [], null);
        $this->setIfExists('completed', $data ?? [], null);
        $this->setIfExists('completed_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sport_id
     *
     * @return float|null
     */
    public function getSportId()
    {
        return $this->container['sport_id'];
    }

    /**
     * Sets sport_id
     *
     * @param float|null $sport_id sport_id
     *
     * @return self
     */
    public function setSportId($sport_id)
    {

        if (is_null($sport_id)) {
            throw new \InvalidArgumentException('non-nullable sport_id cannot be null');
        }

        $this->container['sport_id'] = $sport_id;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return float|null
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param float|null $player_id player_id
     *
     * @return self
     */
    public function setPlayerId($player_id)
    {

        if (is_null($player_id)) {
            throw new \InvalidArgumentException('non-nullable player_id cannot be null');
        }

        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return float|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param float|null $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {

        if (is_null($type_id)) {
            throw new \InvalidArgumentException('non-nullable type_id cannot be null');
        }

        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets from_team_id
     *
     * @return float|null
     */
    public function getFromTeamId()
    {
        return $this->container['from_team_id'];
    }

    /**
     * Sets from_team_id
     *
     * @param float|null $from_team_id from_team_id
     *
     * @return self
     */
    public function setFromTeamId($from_team_id)
    {

        if (is_null($from_team_id)) {
            throw new \InvalidArgumentException('non-nullable from_team_id cannot be null');
        }

        $this->container['from_team_id'] = $from_team_id;

        return $this;
    }

    /**
     * Gets to_team_id
     *
     * @return float|null
     */
    public function getToTeamId()
    {
        return $this->container['to_team_id'];
    }

    /**
     * Sets to_team_id
     *
     * @param float|null $to_team_id to_team_id
     *
     * @return self
     */
    public function setToTeamId($to_team_id)
    {

        if (is_null($to_team_id)) {
            throw new \InvalidArgumentException('non-nullable to_team_id cannot be null');
        }

        $this->container['to_team_id'] = $to_team_id;

        return $this;
    }

    /**
     * Gets position_id
     *
     * @return float|null
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param float|null $position_id position_id
     *
     * @return self
     */
    public function setPositionId($position_id)
    {

        if (is_null($position_id)) {
            array_push($this->openAPINullablesSetToNull, 'position_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets detailed_position_id
     *
     * @return float|null
     */
    public function getDetailedPositionId()
    {
        return $this->container['detailed_position_id'];
    }

    /**
     * Sets detailed_position_id
     *
     * @param float|null $detailed_position_id detailed_position_id
     *
     * @return self
     */
    public function setDetailedPositionId($detailed_position_id)
    {

        if (is_null($detailed_position_id)) {
            array_push($this->openAPINullablesSetToNull, 'detailed_position_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('detailed_position_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['detailed_position_id'] = $detailed_position_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {

        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets career_ended
     *
     * @return bool|null
     */
    public function getCareerEnded()
    {
        return $this->container['career_ended'];
    }

    /**
     * Sets career_ended
     *
     * @param bool|null $career_ended career_ended
     *
     * @return self
     */
    public function setCareerEnded($career_ended)
    {

        if (is_null($career_ended)) {
            throw new \InvalidArgumentException('non-nullable career_ended cannot be null');
        }

        $this->container['career_ended'] = $career_ended;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool|null $completed completed
     *
     * @return self
     */
    public function setCompleted($completed)
    {

        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }

        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return string|null
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param string|null $completed_at completed_at
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {

        if (is_null($completed_at)) {
            throw new \InvalidArgumentException('non-nullable completed_at cannot be null');
        }

        $this->container['completed_at'] = $completed_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


